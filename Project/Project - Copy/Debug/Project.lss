
AVRASM ver. 2.2.7  C:\Users\balabi\Documents\GitHub\COMP_F7\Project\Project - Copy\main.asm Sun Oct 21 17:17:10 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\balabi\Documents\GitHub\COMP_F7\Project\Project - Copy\main.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\balabi\Documents\GitHub\COMP_F7\Project\Project - Copy\main.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Project.asm
                                 ;
                                 ; Created: 2/10/2018 6:39:36 PM
                                 ; Author : omara
                                 ;
                                 
                                 
                                 
                                 ; Replace with your application code
                                 
                                 
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .def to_stop = r2
                                 .def rolling = r3
                                 .def speed = r4
                                 .def to_stop2 = r5
                                 .def need_stop = r6
                                 .def index = r7
                                 .def trans_time = r8
                                 .def stop_time = r9
                                 .def keys_entered = r10
                                 .def stat_num = r11
                                 .def stat_count = r12
                                 .def step = r13
                                 .def lcd_temp = r14
                                 .def flag = r15				;use flag to store the result
                                 .def temp = r16
                                 .def row =r17
                                 .def col =r18
                                 .def mask =r19
                                 .def temp2 =r20
                                 .def stop_now = r21
                                 .def Timertemp = r22
                                 .def shift = r23
                                 
                                 .equ PORTLDIR = 0xF0
                                 .equ INITCOLMASK = 0xEF
                                 .equ INITROWMASK = 0x01
                                 .equ ROWMASK = 0x0F
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 .equ HOB_LABEL = 0b00100000		;high order bit for symbols
                                 .equ HOB_NUM = 0b00110000		;high order bit for numbers
                                 .equ HOB_CHAR = 0b01000000		;high order bit for characters
                                 
                                 
                                 .macro clear
                                 ldi YL, low(@0)						; load the memory address to Y pointer
                                 ldi YH, high(@0)
                                 clr temp							; set temp to 0
                                 st Y+, temp							; clear the two bytes at @0 in SRAM
                                 st Y, temp
                                 .endmacro 
                                 
                                 .macro do_lcd_command
                                 ldi r16, @0
                                 rcall lcd_command
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_r
                                 mov r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_k
                                 ldi r16, @0
                                 rcall lcd_data
                                 rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 sbi PORTA, @0
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 cbi PORTA, @0
                                 .endmacro
                                 
                                 .dseg 
                                 
000200                           name_list: .byte 100				;use 100 bytes to store the station names, 10 bytes for each one
000264                           time_list: .byte 10					;use 10 bytes to store the transfer time, 1 byte for each one
00026e                           TempCounter: .byte 2
                                 
                                 
                                 .cseg
000000 940c 0030                 jmp RESET
                                 .org INT0addr     
000002 940c 009f                 jmp EXT_INT0 
                                 .org INT1addr    
000004 940c 00aa                 jmp EXT_INT1 
                                 .org OVF0addr
00002e 940c 0317                 jmp Timer0OVF						; jump to the interrupt handler for Timer0 overflow
                                 
                                 ;.org 0x72
                                 RESET:
000030 ef0f                      ldi temp, low(RAMEND)
000031 bf0d                      out SPL, temp
000032 e201                      ldi temp, high(RAMEND)
000033 bf0e                      out SPH, temp
000034 ef00                      ldi temp, PORTLDIR 					; columns are outputs, rows are inputs
000035 9300 010a                 STS DDRL, temp     					; cannot use out
000037 ef0f                      ser temp
000038 b907                      out DDRC, temp 						; Make PORTC all outputs
000039 2700                      clr temp
00003a b908                      out PORTC, temp 					; Turn off all the LEDs
                                 
00003b ef0f                      ser temp
00003c bb00                      out DDRF, temp						;set F&A as output
00003d b901                      out DDRA, temp
00003e 2700                      clr temp
00003f bb01                      out PORTF, temp
000040 b902                      out PORTA, temp
                                 
000041 e308
000042 d38a
000043 d3a3                      do_lcd_command 0b00111000 ; 2x5x7
000044 d3be                      rcall sleep_5ms
000045 e308
000046 d386
000047 d39f                      do_lcd_command 0b00111000 ; 2x5x7
000048 d3b1                      rcall sleep_1ms
000049 e308
00004a d382
00004b d39b                      do_lcd_command 0b00111000 ; 2x5x7
00004c e308
00004d d37f
00004e d398                      do_lcd_command 0b00111000 ; 2x5x7
00004f e008
000050 d37c
000051 d395                      do_lcd_command 0b00001000 ; display off?
000052 e001
000053 d379
000054 d392                      do_lcd_command 0b00000001 ; clear display
000055 e006
000056 d376
000057 d38f                      do_lcd_command 0b00000110 ; increment, no display shift
000058 e00e
000059 d373
00005a d38c                      do_lcd_command 0b00001110 ; Cursor on, bar, no blink
                                 
00005b e100                      ldi temp, (1<<PE4)		; PE is labeled as PE$
00005c b90d                      out DDRE, temp
                                 ;ldi temp, 0b00000100; this value and the operation mode determines the PWM duty cycle
00005d e000                      ldi temp,0
00005e 9300 009a                 sts OCR3BL, temp;OC3B low register
000060 2700                      clr temp
000061 9300 009b                 sts OCR3BH, temp;0C3B high register
000063 e002                      ldi temp, (1<<CS31) ; CS30 = 1: no prescaling
000064 9300 0091                 sts TCCR3B, temp; set the prescaling value
000066 e201                      ldi temp, (1<<WGM30)|(1<<COM3B1)
                                 ; WGM30=1: phase correct PWM, 8 bits
                                 ;COM3B1=1: make OC3B override the normal port functionality of the I/O pin PE2
000067 9300 0090                 sts TCCR3A, temp
000069 9478                      sei
                                 ;set external interput
00006a 2700                      clr temp 
00006b b90a                      out DDRD, temp 
00006c b90b                      out PORTD, temp 
00006d e00a                      ldi temp, (2 << ISC10) | (2 << ISC00);set for falling edge 
00006e 9300 0069                 sts EICRA, temp 
000070 b30d                      in temp, EIMSK 
000071 6003                      ori temp, (1<<INT0) | (1<<INT1) 
000072 bb0d                      out EIMSK, temp 
000073 9478                      sei 
                                 
                                 
                                 
                                 
000074 24bb                      clr stat_num
000075 24cc                      clr stat_count
000076 2499                      clr stop_time
000077 2466                      clr need_stop
000078 2755                      clr stop_now
                                 
000079 24dd                      clr step
                                 
00007a e0e0                      ldi r30, low(name_list)
00007b e0f2                      ldi r31, high(name_list)
00007c e6a4                      ldi r26, low(time_list)
00007d e0b2                      ldi r27, high(time_list)
                                 
                                 
00007e d001                      rcall step0
00007f c12f                      rjmp main
                                 
                                 
                                 
                                 ;read the number of stations
                                 step0:
000080 e001
000081 d34b
000082 d364                      do_lcd_command 0b00000001
                                 
000083 e503
000084 d353
000085 d361                      do_lcd_data_k 'S'
000086 e504
000087 d350
000088 d35e                      do_lcd_data_k 'T'
000089 e401
00008a d34d
00008b d35b                      do_lcd_data_k 'A'
00008c e504
00008d d34a
00008e d358                      do_lcd_data_k 'T'
00008f e200
000090 d347
000091 d355                      do_lcd_data_k ' '
000092 e40e
000093 d344
000094 d352                      do_lcd_data_k 'N'
000095 e505
000096 d341
000097 d34f                      do_lcd_data_k 'U'
000098 e40d
000099 d33e
00009a d34c                      do_lcd_data_k 'M'
00009b e30a
00009c d33b
00009d d349                      do_lcd_data_k ':'
                                 
00009e 9508                      ret
                                 
                                 ;external interupt0
                                 EXT_INT0: 
00009f 930f                      push temp 
0000a0 b70f                      in temp, SREG 
0000a1 930f                      push temp 
0000a2 e041                      ldi temp2,1
0000a3 2e24                      mov to_stop,temp2
0000a4 ef0f                      ser temp
0000a5 b908                      out PORTC, temp
0000a6 910f                      pop temp 
0000a7 bf0f                      out SREG, temp 
0000a8 910f                      pop temp 
0000a9 9518                      reti 
                                 
                                 ;external interupt1
                                 EXT_INT1: 
0000aa 930f                      push temp 
0000ab b70f                      in temp, SREG 
0000ac 930f                      push temp 
0000ad e041                      ldi temp2,1
0000ae 2e24                      mov to_stop,temp2
0000af 910f                      pop temp 
0000b0 bf0f                      out SREG, temp 
0000b1 910f                      pop temp 
0000b2 9518                      reti 
                                 
                                 
                                 
                                 
                                 ;read names of each station
                                 step1:
0000b3 94c3                      inc stat_count
                                 
0000b4 e001
0000b5 d317
0000b6 d330                      do_lcd_command 0b00000001
                                 
                                 /*ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp, Z+
                                 do_lcd_data_r lcd_temp
                                 */
                                 /*dec index
                                 mov lcd_temp, index
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2						
                                 do_lcd_data_r lcd_temp*/
                                 
0000b7 2cec                      mov lcd_temp, stat_count
0000b8 e340                      ldi temp2, HOB_NUM
0000b9 2ae4                      or lcd_temp, temp2							; OR the high order bit with the value for outputting to lcd.
0000ba e503
0000bb d31c
0000bc d32a                      do_lcd_data_k 'S'
0000bd e04a                      ldi temp2,10
0000be 16c4                      cp stat_count,temp2
0000bf f041                      breq print_ten3
0000c0 2d0e
0000c1 d316
0000c2 d324                      do_lcd_data_r lcd_temp
                                 back_from_future:
0000c3 e200
0000c4 d313
0000c5 d321                      do_lcd_data_k ' '
                                 ;do_lcd_data_k 'N'
                                 ;do_lcd_data_k 'A'
                                 ;do_lcd_data_k 'M'
                                 ;do_lcd_data_k 'E'
                                 ;do_lcd_data_k ':'
0000c6 2477                      clr index
0000c7 9508                      ret
                                 
                                 print_ten3:
0000c8 e301
0000c9 d30e
0000ca d31c                      do_lcd_data_k '1'
0000cb e300
0000cc d30b
0000cd d319                      do_lcd_data_k '0'
0000ce 940c 00c3                 jmp back_from_future
                                 
                                 ;start to save the transfer time
                                 step2:
0000d0 94c3                      inc stat_count
0000d1 e001
0000d2 d2fa
0000d3 d313                      do_lcd_command 0b00000001
0000d4 2cec                      mov lcd_temp, stat_count
0000d5 e340                      ldi temp2, HOB_NUM
0000d6 2ae4                      or lcd_temp, temp2							; OR the high order bit with the value for outputting to lcd.
0000d7 e503
0000d8 d2ff
0000d9 d30d                      do_lcd_data_k 'S'
0000da e04a                      ldi temp2,10
0000db 16c4                      cp stat_count,temp2
0000dc f131                      breq print_ten1
0000dd 2d0e
0000de d2f9
0000df d307                      do_lcd_data_r lcd_temp
                                 back_from_fir_arg:
0000e0 e200
0000e1 d2f6
0000e2 d304                      do_lcd_data_k ' '
0000e3 e504
0000e4 d2f3
0000e5 d301                      do_lcd_data_k 'T'
0000e6 e40f
0000e7 d2f0
0000e8 d2fe                      do_lcd_data_k 'O'
0000e9 e200
0000ea d2ed
0000eb d2fb                      do_lcd_data_k ' '
0000ec e503
0000ed d2ea
0000ee d2f8                      do_lcd_data_k 'S'
0000ef e049                      ldi temp2,9
0000f0 16c4                      cp stat_count,temp2
0000f1 f0c9                      breq print_ten2
0000f2 14cb                      cp stat_count,stat_num
0000f3 f041                      breq back_to_one
0000f4 94e3                      inc lcd_temp
0000f5 2d0e
0000f6 d2e1
0000f7 d2ef                      do_lcd_data_r lcd_temp
                                 back_from_sec_arg:
0000f8 e200
0000f9 d2de
0000fa d2ec                      do_lcd_data_k ' '
0000fb 9508                      ret
                                 back_to_one:
0000fc e301
0000fd d2da
0000fe d2e8                      do_lcd_data_k '1'
0000ff e200
000100 d2d7
000101 d2e5                      do_lcd_data_k ' '
000102 9508                      ret
                                 
                                 print_ten1:
000103 e301
000104 d2d3
000105 d2e1                      do_lcd_data_k '1'
000106 e300
000107 d2d0
000108 d2de                      do_lcd_data_k '0'
000109 940c 00e0                 jmp back_from_fir_arg
                                 print_ten2:
00010b e301
00010c d2cb
00010d d2d9                      do_lcd_data_k '1'
00010e e300
00010f d2c8
000110 d2d6                      do_lcd_data_k '0'
000111 940c 00f8                 jmp back_from_sec_arg
                                 
                                 ;store the stop time
                                 step3:
                                 
000113 e001
000114 d2b8
000115 d2d1                      do_lcd_command 0b00000001
                                 /*
                                 ldi r26, low(time_list)
                                 ldi r27, high(time_list)
                                 ld lcd_temp,  X+
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp,  X+
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp,  X+
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp,  X+
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2
                                 do_lcd_data_r lcd_temp
                                 ld lcd_temp,  X+
                                 ldi temp2, HOB_NUM
                                 or lcd_temp, temp2
                                 do_lcd_data_r lcd_temp
                                 ldi r26, low(time_list)
                                 ldi r27, high(time_list)
                                 */
000116 e503
000117 d2c0
000118 d2ce                      do_lcd_data_k 'S'
000119 e504
00011a d2bd
00011b d2cb                      do_lcd_data_k 'T'
00011c e40f
00011d d2ba
00011e d2c8                      do_lcd_data_k 'O'
00011f e500
000120 d2b7
000121 d2c5                      do_lcd_data_k 'P'
000122 e200
000123 d2b4
000124 d2c2                      do_lcd_data_k ' '
000125 e504
000126 d2b1
000127 d2bf                      do_lcd_data_k 'T'
000128 e409
000129 d2ae
00012a d2bc                      do_lcd_data_k 'I'
00012b e40d
00012c d2ab
00012d d2b9                      do_lcd_data_k 'M'
00012e e405
00012f d2a8
000130 d2b6                      do_lcd_data_k 'E'
000131 e30a
000132 d2a5
000133 d2b3                      do_lcd_data_k ':'
                                 ;mov lcd_temp, step
                                 ;ldi temp2, HOB_NUM
                                 ;or lcd_temp, temp2
                                 ;do_lcd_data_r lcd_temp
000134 9508                      ret
                                 
                                 
                                 step4:
                                 
000135 e001
000136 d296
000137 d2af                      do_lcd_command 0b00000001
                                 
000138 2ce9                      mov lcd_temp, stop_time
000139 e300                      ldi temp, HOB_NUM
00013a 2ae0                      or lcd_temp, temp
00013b 2d0e
00013c d29b
00013d d2a9                      do_lcd_data_r lcd_temp
                                 ;mov lcd_temp, step
                                 ;ldi temp, HOB_NUM
                                 ;or lcd_temp, temp
                                 ;do_lcd_data_r lcd_temp
00013e e40f
00013f d298
000140 d2a6                      do_lcd_data_k 'O'
000141 e40b
000142 d295
000143 d2a3                      do_lcd_data_k 'K'
000144 e200
000145 d292
000146 d2a0                      do_lcd_data_k ' '
000147 e507
000148 d28f
000149 d29d                      do_lcd_data_k 'W'
00014a e401
00014b d28c
00014c d29a                      do_lcd_data_k 'A'
00014d e409
00014e d289
00014f d297                      do_lcd_data_k 'I'
000150 e504
000151 d286
000152 d294                      do_lcd_data_k 'T'
                                 
000153 9508                      ret
                                 to_for_ten:
000154 940c 0190                 jmp for_ten
                                 to_back_ten:
000156 940c 019c                 jmp back_ten
                                 
                                 ;show the name of the next station
                                 step5:
                                 
000158 e001
000159 d273
00015a d28c                      do_lcd_command 0b00000001
                                 
                                 
00015b 14cb                      cp stat_count,stat_num
00015c f3c9                      breq to_back_ten
                                 
                                 back_from_ten:
00015d 90e1                      ld lcd_temp,Z+
00015e 2d0e
00015f d278
000160 d286                      do_lcd_data_r lcd_temp
000161 90e1                      ld lcd_temp,Z+
000162 2d0e
000163 d274
000164 d282                      do_lcd_data_r lcd_temp
000165 90e1                      ld lcd_temp,Z+
000166 2d0e
000167 d270
000168 d27e                      do_lcd_data_r lcd_temp
000169 90e1                      ld lcd_temp,Z+
00016a 2d0e
00016b d26c
00016c d27a                      do_lcd_data_r lcd_temp
00016d 90e1                      ld lcd_temp,Z+
00016e 2d0e
00016f d268
000170 d276                      do_lcd_data_r lcd_temp
                                 
000171 90e1                      ld lcd_temp,Z+
000172 2d0e
000173 d264
000174 d272                      do_lcd_data_r lcd_temp
000175 90e1                      ld lcd_temp,Z+
000176 2d0e
000177 d260
000178 d26e                      do_lcd_data_r lcd_temp
000179 90e1                      ld lcd_temp,Z+
00017a 2d0e
00017b d25c
00017c d26a                      do_lcd_data_r lcd_temp
00017d 90e1                      ld lcd_temp,Z+
00017e 2d0e
00017f d258
000180 d266                      do_lcd_data_r lcd_temp
000181 90e1                      ld lcd_temp,Z+
000182 2d0e
000183 d254
000184 d262                      do_lcd_data_r lcd_temp
000185 90e2                      ld lcd_temp, -Z
000186 90e2                      ld lcd_temp, -Z
000187 90e2                      ld lcd_temp, -Z
000188 90e2                      ld lcd_temp, -Z
000189 90e2                      ld lcd_temp, -Z
                                 
00018a 90e2                      ld lcd_temp, -Z
00018b 90e2                      ld lcd_temp, -Z
00018c 90e2                      ld lcd_temp, -Z
00018d 90e2                      ld lcd_temp, -Z
00018e 90e2                      ld lcd_temp, -Z
                                 
                                 
                                 
00018f 9508                      ret
                                 for_ten:
000190 90e1                      ld lcd_temp,Z+
000191 90e1                      ld lcd_temp,Z+
000192 90e1                      ld lcd_temp,Z+
000193 90e1                      ld lcd_temp,Z+
000194 90e1                      ld lcd_temp,Z+
                                 
000195 90e1                      ld lcd_temp,Z+
000196 90e1                      ld lcd_temp,Z+
000197 90e1                      ld lcd_temp,Z+
000198 90e1                      ld lcd_temp,Z+
000199 90e1                      ld lcd_temp,Z+
00019a 940c 015d                 jmp back_from_ten
                                 
                                 back_ten:
00019c e0e0                      ldi r30, low(name_list)
00019d e0f2                      ldi r31, high(name_list)
00019e 940c 015d                 jmp back_from_ten
                                 
                                 to_step0:
0001a0 940c 0080                 jmp step0
                                 to_step1:
0001a2 940c 00b3                 jmp step1
                                 to_step2:
0001a4 940c 00d0                 jmp step2
                                 to_step3:
0001a6 940c 00d0                 jmp step2
                                 to_step4:
0001a8 940c 00d0                 jmp step2
                                 
                                 
                                 clear_display:
0001aa d258                      rcall sleep_5ms
                                 
0001ab e001
0001ac d220
0001ad d239                      do_lcd_command 0b00000001 ; clear display
                                 
0001ae c003                      rjmp end_clear
                                 
                                 ; main keeps scanning the keypad to find which key is pressed.
                                 main:
0001af d25e                      rcall sleep_100ms
0001b0 d25d                      rcall sleep_100ms
0001b1 d25c                      rcall sleep_100ms
                                 
                                 end_clear:
                                 
                                 scan_start:
0001b2 ee3f                      ldi mask, INITCOLMASK ; initial column mask
0001b3 2722                      clr col ; initial column
                                 
                                 colloop:
0001b4 9330 010b                 STS PORTL, mask ; set column to mask value
                                 ; (sets column 0 off)
0001b6 ef0f                      ldi temp, 0xFF ; implement a delay so the
                                 ; hardware can stabilize
                                 
                                 delay:
0001b7 950a                      dec temp
0001b8 f7f1                      brne delay
0001b9 9100 0109                 LDS temp, PINL ; read PORTL. Cannot use in 
0001bb 700f                      andi temp, ROWMASK ; read only the row bits
0001bc 300f                      cpi temp, 0xF ; check if any rows are grounded
0001bd f061                      breq nextcol ; if not go to the next column
0001be e031                      ldi mask, INITROWMASK ; initialise row check
0001bf 2711                      clr row ; initial row
                                 
                                 rowloop:      
0001c0 2f40                      mov temp2, temp
0001c1 2343                      and temp2, mask ; check masked bit
0001c2 f419                      brne skipconv ; if the result is non-zero,
                                 ; we need to look again
0001c3 d00d                      rcall convert ; if bit is clear, convert the bitcode
0001c4 940c 01af                 jmp main ; and start again
                                 
                                 
                                 
                                 skipconv:
0001c6 9513                      inc row ; else move to the next row
0001c7 0f33                      lsl mask ; shift the mask to the next bit
0001c8 940c 01c0                 jmp rowloop          
                                 
                                 nextcol:     
0001ca 3023                      cpi col, 3 ; check if we are on the last column
0001cb f319                      breq main ; if so, no buttons were pushed,
                                 ; so start again.
                                 
0001cc 9408                      sec ; else shift the column mask:
                                 ; We must set the carry bit
0001cd 1f33                      rol mask ; and then rotate left by a bit,
                                 ; shifting the carry into
                                 ; bit zero. We need this to make
                                 ; sure all the rows have
                                 ; pull-up resistors
0001ce 9523                      inc col ; increment column value
0001cf 940c 01b4                 jmp colloop ; and check the next column
                                 ; convert function converts the row and column given to a
                                 ; binary number and also outputs the value to PORTC.
                                 ; Inputs come from registers row and col and output is in
                                 ; temp.
                                 
                                 convert:
0001d1 3023                      cpi col, 3 ; if column is 3 we have a letter
0001d2 f139                      breq letters
0001d3 3013                      cpi row, 3 ; if row is 3 we have a symbol or 0
0001d4 f0f9                      breq symbols
                                 
0001d5 2f01                      mov temp, row ; otherwise we have a number (1-9)
0001d6 0f00                      lsl temp ; temp = row * 2
0001d7 0f01                      add temp, row ; temp = row * 3
0001d8 0f02                      add temp, col ; add the column address
                                 ; to get the offset from 1
0001d9 9503                      inc temp ; add 1. Value of switch is
                                 ; row*3 + col + 1.
                                 
                                 ;store time
0001da e040                      ldi temp2,0
0001db 16d4                      cp step,temp2
0001dc f1c1                      breq to_num_key
0001dd e042                      ldi temp2,2
0001de 16d4                      cp step,temp2
0001df f1a9                      breq to_num_key
0001e0 e043                      ldi temp2,3
0001e1 16d4                      cp step,temp2
0001e2 f191                      breq to_num_key
                                 
0001e3 e044                      ldi temp2,4
0001e4 16d4                      cp step,temp2
0001e5 f1a9                      breq to_skip_key
                                 
0001e6 3070                      cpi shift,0
0001e7 f199                      breq to_skip_key
0001e8 3001                      cpi temp,1
0001e9 f189                      breq to_skip_key
                                 
0001ea 3007                      cpi temp,7
0001eb f169                      breq to_normal_key
0001ec 3009                      cpi temp,9
0001ed f149                      breq to_more_key
                                 
0001ee 3074                      cpi shift,4
0001ef f159                      breq to_skip_key
0001f0 3008                      cpi temp,8
0001f1 f129                      breq to_more_key
                                 
0001f2 940c 0219                 jmp to_normal_key
                                 
                                 symbols:
0001f4 3020                      cpi col, 0 ; check if we have a star
0001f5 f1a9                      breq to_star
0001f6 3021                      cpi col, 1 ; or if we have zero
0001f7 f189                      breq to_zero
                                 
                                 ; we'll process for hash
0001f8 940c 028b                 jmp store_next
                                 
                                 letters:
0001fa e040                      ldi temp2,0
0001fb 16d4                      cp step,temp2
0001fc f0f1                      breq to_skip_key
0001fd e042                      ldi temp2,2
0001fe 16d4                      cp step,temp2
0001ff f0d9                      breq to_skip_key
000200 e043                      ldi temp2,3
000201 16d4                      cp step,temp2
000202 f0c1                      breq to_skip_key
000203 e001                      ldi temp, 0x1
000204 0f01                      add temp, row ; increment from 0xA by the row value
000205 2f70                      mov shift, temp
000206 9508                      ret
                                 
                                 ;after entering a character, store it into name list
                                 end_key:
                                 
000207 e04a                      ldi temp2,10
000208 1674                      cp index,temp2
000209 f488                      brsh to_skip_key
00020a 2ee0                      mov lcd_temp, temp; store the value into lcd output register
00020b e400                      ldi temp, HOB_CHAR
00020c 2ae0                      or lcd_temp, temp; OR the high order bit with the value for outputting to lcd.
00020d 92e1                      st Z+,lcd_temp
00020e 9473                      inc index
00020f 2777                      clr shift
000210 940c 027f                 jmp convert_end
                                 
                                 name_full:
000212 2477                      clr index
000213 940c 0248                 jmp skip_key
                                 
                                 to_num_key:
000215 940c 021d                 jmp num_key
                                 to_more_key:
000217 940c 0250                 jmp more_key
                                 to_normal_key:
000219 940c 0249                 jmp normal_key
                                 to_skip_key:
00021b 940c 0248                 jmp skip_key
                                 
                                 ;when we want the number on the key
                                 num_key:
                                 
00021d 2ee0                      mov lcd_temp, temp; store the value into lcd output register
00021e e040                      ldi temp2,0
00021f 16d4                      cp step,temp2
000220 f0d1                      breq set_stat_num
                                 
000221 e042                      ldi temp2,2
000222 16d4                      cp step,temp2
000223 f049                      breq set_trans_time
                                 
                                 
000224 e043                      ldi temp2,3
000225 16d4                      cp step,temp2
000226 f069                      breq set_stop_time
000227 940c 021b                 jmp to_skip_key
                                 
                                 
                                 to_zero:
000229 940c 026f                 jmp zero
                                 to_star:
00022b 940c 025a                 jmp star
                                 
                                 
                                 ;branch to store the transfer time
                                 set_trans_time:
00022d e048                      ldi temp2,8
00022e 1674                      cp index,temp2
00022f f758                      brsh to_skip_key
000230 2e80                      mov trans_time,temp
000231 9473                      inc index
000232 940c 0242                 jmp set_lcd_num
                                 
                                 
                                 ;branch to store the stop time
                                 set_stop_time:
000234 e047                      ldi temp2,7
000235 1674                      cp index,temp2
000236 f720                      brsh to_skip_key
000237 2e90                      mov stop_time,temp
000238 9473                      inc index
000239 940c 0242                 jmp set_lcd_num
                                 
                                 ;branch to store the station number
                                 set_stat_num:
00023b e048                      ldi temp2,8
00023c 1674                      cp index,temp2
00023d f6e8                      brsh to_skip_key
00023e 2eb0                      mov stat_num,temp
00023f 9473                      inc index
000240 940c 0242                 jmp set_lcd_num
                                 
                                 ;convert the value into ascii code
                                 set_lcd_num:
000242 e300                      ldi temp, HOB_NUM
000243 2ae0                      or lcd_temp, temp; OR the high order bit with the value for outputting to lcd.
000244 2777                      clr shift
                                 
000245 94a3                      inc keys_entered
000246 940c 027f                 jmp convert_end
                                 
                                 skip_key:
000248 9508                      ret
                                 
                                 
                                 
                                 
                                 ;keys 2-6 and 8, with 3 characters on the key
                                 normal_key:
000249 5002                      subi temp,2
00024a 2f40                      mov temp2,temp
00024b 0f44                      lsl temp2
00024c 0f04                      add temp,temp2
00024d 0f07                      add temp,shift
00024e 94a3                      inc keys_entered
00024f cfb7                      rjmp end_key
                                 
                                 ;keys 7 and 9,with 4 characters on the key
                                 more_key:
000250 5002                      subi temp,2
000251 2f40                      mov temp2,temp
000252 0f44                      lsl temp2
000253 0f04                      add temp,temp2
000254 0f07                      add temp,shift
000255 9503                      inc temp
000256 94a3                      inc keys_entered
000257 cfaf                      rjmp end_key
                                 
                                 to_set_stop_time:
000258 940c 0234                 jmp set_stop_time
                                 
                                 ;if star is entered, then a whitespace is stored
                                 star:
                                 ;ldi temp, 0xE ; we'll output 0xE for star
                                 ;ldi temp, 0b00100000 ; we'll output 0xE for star
00025a e040                      ldi temp2,0
00025b 16d4                      cp step,temp2
00025c f359                      breq skip_key
00025d e042                      ldi temp2,2
00025e 16d4                      cp step,temp2
00025f f341                      breq skip_key
000260 e043                      ldi temp2,3
000261 16d4                      cp step,temp2
000262 f329                      breq skip_key
000263 e200                      ldi temp, 0b00100000 ; we'll output 0xE for star
000264 2ee0                      mov lcd_temp, temp;
000265 92e1                      st Z+,lcd_temp
000266 9473                      inc index
000267 2777                      clr shift
000268 94a3                      inc keys_entered
000269 940c 027f                 jmp convert_end
                                 
                                 to_to_skip_key:
00026b 940c 0248                 jmp skip_key
                                 
                                 to_set_trans_time:
00026d 940c 022d                 jmp set_trans_time
                                 
                                 ;when zero is pressed, zero is stored
                                 zero:
00026f e000                      ldi temp,0
000270 2ee0                      mov lcd_temp, temp; store the value into lcd output register
000271 e041                      ldi temp2,1
000272 16d4                      cp step,temp2
000273 f2a1                      breq skip_key
                                 
000274 e040                      ldi temp2,0
000275 16d4                      cp step,temp2
000276 f221                      breq set_stat_num
                                 
000277 e042                      ldi temp2,2
000278 16d4                      cp step,temp2
000279 f399                      breq to_set_trans_time
                                 
                                 
00027a e043                      ldi temp2,3
00027b 16d4                      cp step,temp2
00027c f2d9                      breq to_set_stop_time
00027d 940c 021b                 jmp to_skip_key
                                 
                                 
                                 
                                 convert_end:
00027f 9100 0109                 LDS temp, PINL ; read PORTL. Cannot use in 
000281 2ef0                      mov flag, temp
                                 ;out PORTC, temp ; write value to PORTC
000282 2d0e
000283 d154
000284 d162                      do_lcd_data_r lcd_temp; output the value to the LCD
                                 	
                                 preserve:
000285 d17d                      rcall sleep_5ms
000286 9100 0109                 LDS temp, PINL ; read PORTL. Cannot use in 
000288 150f                      cp temp, flag
000289 f3d9                      breq preserve
00028a 9508                      ret ; return to caller
                                 
                                 ;if hash is pressed, check the step and do the following work
                                 store_next:
00028b e040                      ldi temp2,0
00028c 16d4                      cp step,temp2
00028d f089                      breq store_step0
00028e e041                      ldi temp2,1
00028f 16d4                      cp step,temp2
000290 f121                      breq store_step1
000291 e042                      ldi temp2,2
000292 16d4                      cp step,temp2
000293 f1a9                      breq store_step2
000294 e043                      ldi temp2,3
000295 16d4                      cp step,temp2
000296 f0d1                      breq to_store_step3
000297 e044                      ldi temp2,4
000298 16d4                      cp step,temp2
000299 f019                      breq end_store_next
00029a e045                      ldi temp2,5
00029b 16d4                      cp step,temp2
00029c f0b1                      breq to_store_step5
                                 
                                 
                                 
                                 end_store_next:
00029d 24aa                      clr keys_entered
00029e 9508                      ret
                                 
                                 ;store the station number, handle the error input
                                 store_step0:
                                 ;ldi temp2,2
                                 ;cp keys_entered,temp2
                                 ;brsh error_step0
                                 
00029f e040                      ldi temp2,0
0002a0 16a4                      cp keys_entered,temp2
0002a1 f059                      breq error_step0
0002a2 e040                      ldi temp2,0
0002a3 16b4                      cp stat_num,temp2
0002a4 f041                      breq error_step0
0002a5 e041                      ldi temp2,1
0002a6 16b4                      cp stat_num,temp2
0002a7 f029                      breq error_step0
                                 
                                 end_store_step0:
0002a8 94d3                      inc step
0002a9 2477                      clr index
                                 ;mov lcd_temp, step
                                 ;ldi temp, HOB_NUM
                                 ;or lcd_temp, temp
                                 
0002aa de08                      rcall step1
                                 ;jmp convert_end
                                 
0002ab 940c 029d                 jmp end_store_next
                                 error_step0:
0002ad e04a                      ldi temp2,10
0002ae 2eb4                      mov stat_num,temp2
0002af 940c 02a8                 jmp end_store_step0
                                 
                                 to_store_step3:
0002b1 940c 02df                 jmp store_step3
                                 to_store_step5:
0002b3 940c 02fa                 jmp store_step5
                                 
                                 ;store the name of each station, handle the error input
                                 store_step1:
0002b5 e200                      ldi temp, 0b00100000
0002b6 e04a                      ldi temp2,10
0002b7 1674                      cp index,temp2
0002b8 f021                      breq full_name2
0002b9 9301                      st Z+,temp
0002ba 9473                      inc index
0002bb 940c 02b5                 jmp store_step1
                                 
                                 full_name2:
0002bd 2477                      clr index
0002be f001                      breq end_store_step10
                                 
                                 end_store_step10:
                                 ;inc stat_count
0002bf 14cb                      cp stat_count,stat_num
0002c0 f02c                      brlt end_store_step11
0002c1 94d3                      inc step
0002c2 24cc                      clr stat_count
                                 
0002c3 de0c                      rcall step2
0002c4 940c 029d                 jmp end_store_next
                                 end_store_step11:
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
                                 ;ld lcd_temp, -Z
0002c6 ddec                      rcall step1
0002c7 940c 029d                 jmp end_store_next
                                 
                                 ;store the transfer time of each station, handle the error input
                                 store_step2:
                                 ;ldi temp2,2
                                 ;cp keys_entered,temp2
                                 ;brsh error_step2
0002c9 e040                      ldi temp2,0
0002ca 16a4                      cp keys_entered,temp2
0002cb f079                      breq error_step2
0002cc e040                      ldi temp2,0
0002cd 1684                      cp trans_time,temp2
0002ce f061                      breq error_step2
                                 
                                 
                                 end_store_step20:
0002cf 928d                      st X+,trans_time
                                 ;inc stat_count
0002d0 2477                      clr index
0002d1 14cb                      cp stat_count,stat_num
0002d2 f02c                      brlt end_store_step21
0002d3 94d3                      inc step
0002d4 24cc                      clr stat_count
0002d5 de3d                      rcall step3
0002d6 940c 029d                 jmp end_store_next
                                 end_store_step21:
                                 
0002d8 ddf7                      rcall step2
0002d9 940c 029d                 jmp end_store_next
                                 
                                 error_step2:
0002db e04a                      ldi temp2,10
0002dc 2e84                      mov trans_time,temp2
0002dd 940c 02cf                 jmp end_store_step20
                                 
                                 
                                 
                                 ;store the stop time of each station, handle the error input
                                 store_step3:
                                 ;ldi temp2,2
                                 ;cp keys_entered,temp2
                                 ;brsh higher_error_step3
0002df e040                      ldi temp2,0
0002e0 16a4                      cp keys_entered,temp2
0002e1 f081                      breq lower_error_step3
                                 
0002e2 e040                      ldi temp2,0
0002e3 1694                      cp stop_time,temp2
0002e4 f069                      breq lower_error_step3
                                 
0002e5 e041                      ldi temp2,1
0002e6 1694                      cp stop_time,temp2
0002e7 f051                      breq lower_error_step3
                                 
0002e8 e046                      ldi temp2,6
0002e9 1694                      cp stop_time,temp2
0002ea f458                      brsh higher_error_step3
                                 
                                 end_store_step3:
0002eb 2477                      clr index
0002ec 94d3                      inc step
0002ed 24aa                      clr keys_entered
0002ee de46                      rcall step4
0002ef d018                      rcall timer0_start
                                 
0002f0 940c 029d                 jmp end_store_next
                                 lower_error_step3:
0002f2 e042                      ldi temp2,2
0002f3 2e94                      mov stop_time,temp2
0002f4 940c 02eb                 jmp end_store_step3
                                 
                                 higher_error_step3:
0002f6 e045                      ldi temp2,5
0002f7 2e94                      mov stop_time,temp2
0002f8 940c 02eb                 jmp end_store_step3
                                 
                                 ;when the monorail is traveling, press hash to change the flag of immediately stop
                                 store_step5:
0002fa d113                      rcall sleep_100ms
0002fb d112                      rcall sleep_100ms
0002fc d111                      rcall sleep_100ms
0002fd d110                      rcall sleep_100ms
0002fe e041                      ldi temp2,1
0002ff 1754                      cp stop_now,temp2
000300 f011                      breq change_stop_now
000301 2f54                      mov stop_now,temp2
000302 9508                      ret
                                 change_stop_now:
000303 2755                      clr stop_now
000304 2422                      clr to_stop
000305 2455                      clr to_stop2
000306 2466                      clr need_stop
000307 9508                      ret
                                 
                                 
                                 
                                 
                                 timer0_start:
000308 24aa                      clr keys_entered
000309 e000                      ldi temp, 0b00000000
00030a bd04                      out TCCR0A, temp
00030b e002                      ldi temp, 0b00000010
00030c bd05                      out TCCR0B, temp					; set prescalar value to 8
00030d e001                      ldi temp, 1<<TOIE0					; TOIE0 is the bit number of TOIE which is 0
00030e 9300 006e                 sts TIMSK0, temp					; enable Timer0 Overflow interrupt
000310 9478                      sei									; enable global interrupt
                                 
000311 9508                      ret
                                 
                                 ;2 leds will blink if needed
                                 light:
000312 e003                      ldi temp,0b00000011
000313 b908                      out PORTC, temp
000314 d0ee                      rcall sleep_5ms
000315 940c 0334                 jmp back_from_light
                                 
                                 Timer0OVF:						;interrupt subroutine to Timer0
000317 b76f                      in Timertemp, SREG;
000318 936f                      push Timertemp					; prologue starts
000319 93df                      push YH							; save all conflicting registers
00031a 93cf                      push YL
00031b 939f                      push r25
00031c 938f                      push r24						; prologue ends 
                                 								; Load the value of the temporary counter
                                 
00031d 9180 026e                 lds r24, TempCounter
00031f 9190 026f                 lds r25, TempCounter+1
000321 9601                      adiw r25:r24, 1					; increase the temporary counter by 1
000322 e041                      ldi temp2,1
000323 1754                      cp stop_now,temp2
000324 f1d1                      breq go_stop 
                                 back_from_stop:
                                 
000325 e041                      ldi temp2,1
000326 1634                      cp rolling,temp2
000327 f061                      breq back_from_light
                                 
000328 3081                      cpi r24,low(1)					;if the monorail stops, 2 leds will blink 3 times/s
000329 e060                      ldi Timertemp,high(1)
00032a 0796                      cpc r25, Timertemp
00032b f331                      breq light
00032c 328d                      cpi r24,low(2605)
00032d e06a                      ldi Timertemp,high(2605)
00032e 0796                      cpc r25, Timertemp
00032f f311                      breq light
000330 3588                      cpi r24,low(5208)
000331 e164                      ldi Timertemp,high(5208)
000332 0796                      cpc r25, Timertemp
000333 f2f1                      breq light
                                 
                                 back_from_light:
000334 2700                      clr temp
000335 b908                      out PORTC,temp
000336 3884                      cpi r24, low(7812)				; check if TempCounter(r25:r24) = 7812
000337 e16e                      ldi Timertemp, high(7812)		; about 1s
000338 0796                      cpc r25, Timertemp
000339 f491                      brne NotSecond
                                 
00033a e041                      ldi temp2,1
00033b 1754                      cp stop_now,temp2
00033c f049                      breq return_from_op 
                                 
00033d e044                      ldi temp2,4						;wait five seconds
00033e 16d4                      cp step,temp2
00033f f111                      breq wait_five
                                 ;;;;;;;;;;;;;;;;;;;;;;;
                                 
000340 e041                      ldi temp2,1						;check if we need to stop at the next station
000341 1654                      cp to_stop2,temp2
000342 f0a1                      breq go_stop_time
                                 
000343 e045                      ldi temp2,5						;if the monorail is traveling, print the name of the next station
                                 
000344 16d4                      cp step,temp2
000345 f1c9                      breq print_station
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;
                                 return_from_op:
                                 
000346 e6ce
000347 e0d2
000348 2700
000349 9309
00034a 8308                      clear TempCounter
00034b c004                      rjmp End_Timer0OVF
                                 
                                 NotSecond:
                                 
00034c 9380 026e                 sts TempCounter, r24
00034e 9390 026f                 sts TempCounter+1, r25
                                 End_Timer0OVF:
000350 918f                      pop r24
000351 919f                      pop r25
000352 91cf                      pop YL
000353 91df                      pop YH
000354 916f                      pop Timertemp
000355 bf6f                      out SREG, Timertemp
000356 9518                      reti								; return from the interrupt
                                 
                                 
                                 go_stop_time:						;count the time when the monorail stops at the next station
000357 d06e                      rcall stop_rolling
000358 94a3                      inc keys_entered
000359 14a9                      cp keys_entered,stop_time
00035a f35c                      brlt return_from_op
00035b 2422                      clr to_stop
00035c 2455                      clr to_stop2
00035d 24aa                      clr keys_entered
00035e 2466                      clr need_stop
                                 
                                 go_stop:							;stop the motor
00035f d066                      rcall stop_rolling
000360 940c 0325                 jmp back_from_stop
                                 
                                 wait_five:
000362 94a3                      inc keys_entered
000363 e044                      ldi temp2,4
000364 16a4                      cp keys_entered,temp2
000365 f0b4                      brlt print_step4
000366 94d3                      inc step 
000367 e0e0                      ldi r30, low(name_list)
000368 e0f2                      ldi r31, high(name_list)
000369 e6a4                      ldi r26, low(time_list)
00036a e0b2                      ldi r27, high(time_list)
00036b 90e1                      ld lcd_temp,Z+
00036c 90e1                      ld lcd_temp,Z+
00036d 90e1                      ld lcd_temp,Z+
00036e 90e1                      ld lcd_temp,Z+
00036f 90e1                      ld lcd_temp,Z+
                                 
000370 90e1                      ld lcd_temp,Z+
000371 90e1                      ld lcd_temp,Z+
000372 90e1                      ld lcd_temp,Z+
000373 90e1                      ld lcd_temp,Z+
000374 90e1                      ld lcd_temp,Z+
000375 24cc                      clr stat_count
000376 24aa                      clr keys_entered
000377 908d                      ld trans_time, X+
                                 ;inc trans_time
000378 94c3                      inc stat_count
000379 2466                      clr need_stop
                                 
00037a 940c 0346                 jmp return_from_op
                                 
                                 print_step4:
00037c ddb8                      rcall step4
00037d 940c 0346                 jmp return_from_op
                                 
                                 print_station:
00037f e041                      ldi temp2,1
000380 1754                      cp stop_now,temp2
000381 f221                      breq return_from_op
000382 e041                      ldi temp2,1
000383 1664                      cp need_stop,temp2
000384 f009                      breq go_print
000385 d038                      rcall start_rolling
                                 
                                 go_print:
000386 94a3                      inc keys_entered
000387 14a8                      cp keys_entered,trans_time
000388 f194                      brlt print_step5
                                 
                                 										;check if we have got to the last station
000389 14cb                      cp stat_count,stat_num
00038a f0ec                      brlt name_loop
00038b 14cb                      CP stat_count,stat_num
00038c f001                      breq reset_stat
                                 reset_stat:
                                 
00038d e0e0                      ldi r30, low(name_list)
00038e e0f2                      ldi r31, high(name_list)
00038f e6a4                      ldi r26, low(time_list)
000390 e0b2                      ldi r27, high(time_list)
000391 90e1                      ld lcd_temp,Z+
000392 90e1                      ld lcd_temp,Z+
000393 90e1                      ld lcd_temp,Z+
000394 90e1                      ld lcd_temp,Z+
000395 90e1                      ld lcd_temp,Z+
                                 
000396 90e1                      ld lcd_temp,Z+
000397 90e1                      ld lcd_temp,Z+
000398 90e1                      ld lcd_temp,Z+
000399 90e1                      ld lcd_temp,Z+
00039a 90e1                      ld lcd_temp,Z+
00039b 24cc                      clr stat_count
00039c 94c3                      inc stat_count
00039d 24aa                      clr keys_entered
00039e 908d                      ld trans_time, X+
                                 ;inc trans_time
00039f e041                      ldi temp2,1
0003a0 1624                      cp to_stop,temp2
0003a1 f011                      breq set_next_stop
                                 
0003a2 940c 0346                 jmp return_from_op
                                 
                                 set_next_stop:
0003a4 e041                      ldi temp2,1
0003a5 2e54                      mov to_stop2,temp2
0003a6 940c 0346                 jmp return_from_op
                                 
                                 
                                 										;move to the next station
                                 name_loop:
0003a8 94c3                      inc stat_count
0003a9 24aa                      clr keys_entered
0003aa 908d                      ld trans_time, X+
0003ab ddac                      rcall step5
                                 
0003ac 90e1                      ld lcd_temp,Z+
0003ad 90e1                      ld lcd_temp,Z+
0003ae 90e1                      ld lcd_temp,Z+
0003af 90e1                      ld lcd_temp,Z+
0003b0 90e1                      ld lcd_temp,Z+
                                 
0003b1 90e1                      ld lcd_temp,Z+
0003b2 90e1                      ld lcd_temp,Z+
0003b3 90e1                      ld lcd_temp,Z+
0003b4 90e1                      ld lcd_temp,Z+
0003b5 90e1                      ld lcd_temp,Z+
                                 
0003b6 e041                      ldi temp2,1
0003b7 1624                      cp to_stop,temp2
0003b8 f359                      breq set_next_stop
0003b9 940c 0346                 jmp return_from_op
                                 
                                 print_step5:
0003bb dd9c                      rcall step5
                                 
                                 
0003bc 940c 0346                 jmp return_from_op
                                 
                                 	
                                 start_rolling:						;starts the motor
                                 
0003be e041                      ldi temp2,1
0003bf 2e64                      mov need_stop,temp2
0003c0 2e34                      mov rolling,temp2
0003c1 e34c                      ldi temp2,60
0003c2 2e44                      mov speed, temp2
0003c3 9240 009a                 sts OCR3BL, speed
                                 
0003c5 9508                      ret
                                 
                                 stop_rolling:
0003c6 e040                      ldi temp2,0
0003c7 2e34                      mov rolling,temp2
0003c8 e040                      ldi temp2,0
0003c9 2e44                      mov speed, temp2
0003ca 9240 009a                 sts OCR3BL, speed
0003cc 9508                      ret
                                 ;
                                 ; Send a command to the LCD (r16)
                                 ;
                                 
                                 lcd_command:
0003cd bb01                      out PORTF, r16
0003ce 0000                      nop
0003cf 9a16                      lcd_set LCD_E
0003d0 0000                      nop
0003d1 0000                      nop
0003d2 0000                      nop
0003d3 9816                      lcd_clr LCD_E
0003d4 0000                      nop
0003d5 0000                      nop
0003d6 0000                      nop
0003d7 9508                      ret
                                 
                                 lcd_data: 
0003d8 bb01                      out PORTF, r16
0003d9 9a17                      lcd_set LCD_RS
0003da 0000                      nop
0003db 0000                      nop
0003dc 0000                      nop
0003dd 9a16                      lcd_set LCD_E
0003de 0000                      nop
0003df 0000                      nop
0003e0 0000                      nop
0003e1 9816                      lcd_clr LCD_E
0003e2 0000                      nop
0003e3 0000                      nop
0003e4 0000                      nop
0003e5 9817                      lcd_clr LCD_RS
0003e6 9508                      ret
                                 
                                 lcd_wait:
0003e7 930f                      push r16
0003e8 2700                      clr r16
0003e9 bb00                      out DDRF, r16
0003ea bb01                      out PORTF, r16
0003eb 9a15                      lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
0003ec 0000                      nop
0003ed 9a16                      lcd_set LCD_E
0003ee 0000                      nop
0003ef 0000                      nop
0003f0 0000                      nop
0003f1 b10f                      in r16, PINF
0003f2 9816                      lcd_clr LCD_E
0003f3 fd07                      sbrc r16, 7
0003f4 cff7                      rjmp lcd_wait_loop
0003f5 9815                      lcd_clr LCD_RW
0003f6 ef0f                      ser r16
0003f7 bb00                      out DDRF, r16
0003f8 910f                      pop r16
0003f9 9508                      ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0003fa 938f                      push r24
0003fb 939f                      push r25
0003fc e09f                      ldi r25, high(DELAY_1MS)
0003fd e98c                      ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0003fe 9701                      sbiw r25:r24, 1
0003ff f7f1                      brne delayloop_1ms
000400 919f                      pop r25
000401 918f                      pop r24
000402 9508                      ret
                                 
                                 sleep_5ms:
000403 dff6                      rcall sleep_1ms
000404 dff5                      rcall sleep_1ms
000405 dff4                      rcall sleep_1ms
000406 dff3                      rcall sleep_1ms
000407 dff2                      rcall sleep_1ms
000408 9508                      ret
                                 
                                 sleep_20ms:
000409 dff9                      rcall sleep_5ms
00040a dff8                      rcall sleep_5ms
00040b dff7                      rcall sleep_5ms
00040c dff6                      rcall sleep_5ms
00040d 9508                      ret
                                 
                                 sleep_100ms:
00040e dffa                      rcall sleep_20ms
00040f dff9                      rcall sleep_20ms
000410 dff8                      rcall sleep_20ms
000411 dff7                      rcall sleep_20ms
000412 dff6                      rcall sleep_20ms


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   4 y  :   2 z  :  63 r0 :   0 r1 :   0 r2 :   6 r3 :   3 r4 :   4 
r5 :   4 r6 :   6 r7 :  17 r8 :   8 r9 :   9 r10:  20 r11:  11 r12:  21 
r13:  31 r14:  90 r15:   2 r16: 193 r17:   6 r18:   7 r19:   6 r20: 140 
r21:   7 r22:  12 r23:   8 r24:  13 r25:  13 r26:   3 r27:   3 r28:   3 
r29:   3 r30:   4 r31:   4 
Registers used: 33 out of 35 (94.3%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   7 adiw  :   1 and   :   1 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  66 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   6 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  43 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  61 cpc   :   4 
cpi   :  16 cpse  :   0 dec   :   1 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :  28 jmp   :  60 ld    :  63 ldd   :   0 ldi   : 167 
lds   :   5 lpm   :   0 lsl   :   4 lsr   :   0 mov   :  44 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  20 or    :   5 
ori   :   1 out   :  25 pop   :  12 push  :  12 rcall : 187 ret   :  23 
reti  :   3 rjmp  :   6 rol   :   1 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   3 sen   :   0 ser   :   4 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   6 std   :   0 sts   :  12 sub   :   0 subi  :   2 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 42 out of 116 (36.2%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000828   2008      0   2008  262144   0.8%
[.dseg] 0x000200 0x000270      0    112    112    8192   1.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
