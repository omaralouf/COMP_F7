
AVRASM ver. 2.2.7  C:\Users\omara\Documents\Atmel Studio\7.0\Project_final\Project_final\main.asm Fri Oct 26 14:44:26 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\omara\Documents\Atmel Studio\7.0\Project_final\Project_final\main.asm(5): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\omara\Documents\Atmel Studio\7.0\Project_final\Project_final\main.asm(5): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
                                 
                                 ; Project_final.asm
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;
                                 ; Authors: Ihor Balaban & Omar Al-Ouf
                                 
                                 .include "m2560def.inc" 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def sec_left = r6
                                 .def temp_counter = r7
                                 .def max_stations = r8	; used in emulator mode to hold maximum number of stations 
                                 .def shift = r9			; used in step 2 to store the shift of the number for outputting letters 
                                 .def n_length = r10		; used as a buffer to store current length of name
                                 .def stop_time = r11		; used for storing stop times between stations 
                                 .def current_station = r12	; used for storing current station number
                                 .def temp3 = r13 
                                 .def flag =  r14
                                 .def char_buff = r15	; serves as a buffer to store numbers, symbols, letters
                                 .def temp = r16
                                 .def row = r17
                                 .def col = r18
                                 .def mask = r19
                                 .def temp2 = r20
                                 .def Treg = r21			; flag status register used for train control 
                                 .def n_chars = r22		; ; number of characters on screen
                                 .def lcd_temp = r23		
                                 .def NPL = r24
                                 .def NPH = r25			; low and high bytes to store current address of counter 
                                 
                                 
                                 ;Keypad constants 
                                 .equ PORTLDIR = 0xF0
                                 .equ INITCOLMASK = 0xEF
                                 .equ INITROWMASK = 0x01
                                 .equ ROWMASK = 0x0F
                                 
                                 ;LCD constansts
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 ; macro to clear 2 byte data stored at an address
                                 .macro clear_ptr
                                 ldi YL, low(@0)
                                 ldi YH, high(@0)
                                 clr temp
                                 st Y+, temp
                                 st Y, temp
                                 .endmacro
                                 
                                 ; macro used to multiply number by ten for storing multi digit
                                 ; numbers
                                 .macro mul_by_10
                                 	mov temp2, @0
                                 	mov temp3, @0
                                 	ldi temp, 9
                                 loop_start:
                                 	add temp2, temp3
                                 	subi temp, 1
                                 	cpi temp, 1 
                                 	brge loop_start
                                 	mov temp, temp2
                                 	brvs overflow_occurred
                                 	rjmp macro_end
                                 overflow_occurred: 
                                 	ldi temp, 128
                                 macro_end:
                                 .endmacro
                                 
                                 ; macros for checking which step the simulator is on using Treg flag bits  
                                 .macro check_step1
                                 	ldi @0, 0b10000000
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_step2
                                 	ldi @0, 0b01000000
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_step3
                                 	ldi @0, 0b00100000
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_step4
                                 	ldi @0, 0b00010000
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_emulator
                                 	ldi @0, 0b00001000
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_motor_running
                                 	ldi @0, 0b00000010
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_hash_pressed
                                 	ldi @0, 0b00000100
                                 	and @0, Treg
                                 .endmacro
                                 
                                 .macro check_next_stop
                                 	ldi @0, 0b00000001
                                 	and @0, Treg
                                 .endmacro
                                 
                                 ; macro to load an address into a stack pointer
                                 .macro ld_in_ptr
                                 	ldi @0, low(@2)
                                 	ldi @1, high(@2)
                                 .endmacro
                                 
                                 ;LCD Macros 
                                 .macro do_lcd_command
                                 	ldi r16, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                 	mov r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_l	; for printing letters to lcd
                                 	ldi r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 sbi PORTA, @0
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 cbi PORTA, @0
                                 .endmacro
                                 
                                 
                                 .dseg
000200                           stat_names: .byte 100		; 100 bytes used to store station names, 10 bytes each 
000264                           stat_char_nums: .byte 10	; 10 bytes to store how many chars are in each station name
00026e                           stat_times: .byte 10			; 10 bytes to store transfer time for each station
000278                           stations: .byte 1				; 1 byte to store the number of stations 
000279                           TC: .byte 2					; tempcounter 
                                 
                                 .cseg
000000 940c 0030                 jmp RESET
                                 .org INT0addr
000002 940c 0084                 jmp PB_0
                                 .org INT1addr
000004 940c 0090                 jmp PB_1
                                 .org OVF0addr
00002e 940c 009c                 jmp Timer0OVF
                                 
                                 RESET:
000030 ef0f                      	ldi temp, low(RAMEND)
000031 bf0d                      	out SPL, temp
000032 e201                      	ldi temp, high(RAMEND)
000033 bf0e                      	out SPH, temp
                                 	
000034 ef00                      	ldi temp, PORTLDIR		
000035 9300 010a                 	sts DDRL, temp			; columns are outputs, rows are inputs (0b11110000)
                                 	
000037 ef0f                      	ser temp
000038 b907                      	out DDRC, temp			; Port C,F,A are all outputs
000039 bb00                      	out DDRF, temp
00003a b901                      	out DDRA, temp
                                 	
00003b 2700                      	clr temp
00003c b908                      	out PORTC, temp			; all LEDs off
00003d bb01                      	out PORTF, temp
00003e b902                      	out PORTA, temp			; enable pull-up resisters 
                                 
00003f e308
000040 d441
000041 d45a                      	do_lcd_command 0b00111000 ; 2x5x7
000042 d475                      	rcall sleep_5ms
000043 e308
000044 d43d
000045 d456                      	do_lcd_command 0b00111000 ; 2x5x7
000046 d468                      	rcall sleep_1ms
000047 e308
000048 d439
000049 d452                      	do_lcd_command 0b00111000 ; 2x5x7
00004a e308
00004b d436
00004c d44f                      	do_lcd_command 0b00111000 ; 2x5x7
00004d e008
00004e d433
00004f d44c                      	do_lcd_command 0b00001000 ; display off?
000050 e001
000051 d430
000052 d449                      	do_lcd_command 0b00000001 ; clear display
000053 e006
000054 d42d
000055 d446                      	do_lcd_command 0b00000110 ; increment, no display shift
000056 e00d
000057 d42a
000058 d443                      	do_lcd_command 0b00001101 ; no cursor, bar blinks
                                 
000059 e100                      	ldi temp, (1<<PE4)		; PE is labeled as PE2
00005a b90d                      	out DDRE, temp	; Port E as output
                                 	
                                 	;Timer3
                                 	;Determine duty-free
00005b e000                      	ldi temp,0
00005c 9300 009a                 	sts OCR3BL, temp	; low register
00005e 2700                      	clr temp
00005f 9300 009b                 	sts OCR3BH, temp	; high register
000061 e001                      	ldi temp, (1<<CS30)	; no prescaling (CS30 = 1)
000062 9300 0091                 	sts TCCR3B, temp
000064 e201                      	ldi temp, (1<<WGM30)|(1<<COM3B1)	; phase correct PWM, 8 bits, override port function of PE2
000065 9300 0090                 	sts  TCCR3A,temp
000067 9478                      	sei
000068 2700                      	clr temp
000069 b90a                      	out DDRD, temp		; set external interrupt 
00006a b90b                      	out PORTD, temp
00006b e00a                      	ldi temp, (2<<ISC10) | (2<<ISC00) ; set falling edge
00006c 9300 0069                 	sts EICRA, temp
00006e b30d                      	in temp, EIMSK
00006f 6003                      	ori temp, (1<<INT0) |(1<<INT1)
000070 bb0d                      	out EIMSK, temp
000071 9478                      	sei
                                 
                                 	; clear all registers 
000072 e7c9
000073 e0d2
000074 2700
000075 9309
000076 8308                      	clear_ptr TC
000077 2466                      	clr sec_left
000078 24ff                      	clr char_buff
000079 24bb                      	clr stop_time
00007a 2499                      	clr shift
00007b 24aa                      	clr n_length
00007c 24cc                      	clr current_station
00007d 2755                      	clr Treg 
00007e 2766                      	clr n_chars 
00007f e7a8
000080 e0b2                      	ld_in_ptr xl,xh, stations
000081 936c                      	st x, n_chars		; store zero in memory 
                                 	
000082 d176                      	rcall step_1
000083 c075                      	rjmp main
                                 
                                 ;external interupt0
                                 PB_0: 
000084 930f                      	push temp 
000085 b70f                      	in temp, SREG 
000086 930f                      	push temp 	
000087 e008
000088 2305                      	check_emulator temp
000089 3000                      	cpi temp, 0
00008a f009                      	breq not_running0	; pb0 pressed during other step 1-5
                                 
00008b 6051                      	ori Treg, 0b1		; set stop at next station flag 
                                 not_running0: 
00008c 910f                      	pop temp 
00008d bf0f                      	out SREG, temp 
00008e 910f                      	pop temp 
00008f 9518                      	reti 
                                 
                                 ;external interupt1
                                 PB_1: 
000090 930f                      	push temp 
000091 b70f                      	in temp, SREG 
000092 930f                      	push temp 
000093 e008
000094 2305                      	check_emulator temp
000095 3000                      	cpi temp, 0
000096 f009                      	breq not_running1	; pb0 pressed during other step 1-5
000097 6051                      	ori Treg, 0b1		; set stop at next station flag
                                 not_running1:
000098 910f                      	pop temp 
000099 bf0f                      	out SREG, temp 
00009a 910f                      	pop temp 
00009b 9518                      	reti 
                                 
                                 ;Timer0 interrupt
                                 Timer0OVF:
00009c b70f                      	in temp, SREG
00009d 930f                      	push temp
00009e 93df                      	push YH
00009f 93cf                      	push YL
0000a0 939f                      	push NPH
0000a1 938f                      	push NPL
                                 
0000a2 9180 0279                 	lds NPL, TC
0000a4 9190 027a                 	lds NPH, TC+1
0000a6 9601                      	adiw NPH:NPL, 1
                                 
                                 	; check if emulator running, if the motor is stopped, blink the lights 
0000a7 e008
0000a8 2305                      	check_emulator temp
0000a9 3008                      	cpi temp, 0b00001000
0000aa f4b1                      	brne continue_time_check	; emulator not running
0000ab e002
0000ac 2305                      	check_motor_running temp
0000ad 3002                      	cpi temp, 0b00000010
0000ae f091                      	breq continue_time_check	; motor running, dont blink lights 
                                 	; motor off blink lights 
0000af 3081                      	cpi NPL, low(1)
0000b0 e000                      	ldi temp, high(1)
0000b1 0790                      	cpc NPH, temp
0000b2 f049                      	breq blink
                                 
0000b3 3184                      	cpi NPL, low(20)
0000b4 e000                      	ldi temp, high(20)
0000b5 0790                      	cpc NPH, temp
0000b6 f029                      	breq blink
                                 
0000b7 3288                      	cpi NPL, low(40)
0000b8 e000                      	ldi temp, high(40)
0000b9 0790                      	cpc NPH, temp
0000ba f009                      	breq blink 
0000bb c005                      	rjmp continue_time_check
                                 
                                 blink:
0000bc e003                      	ldi temp,0b00000011
0000bd b908                      	out PORTC, temp
0000be d3f9                      	rcall sleep_5ms
0000bf 940c 00c1                 	jmp continue_time_check
                                 	
                                 
                                 continue_time_check:
0000c1 2700                      	clr temp
0000c2 b908                      	out PORTC, temp
                                 
0000c3 338d                      	cpi NPL, low(61)
0000c4 e000                      	ldi temp, high(61)
0000c5 0790                      	cpc NPH, temp
0000c6 f541                      	brne Not_a_second
                                 
0000c7 e004
0000c8 2305                      	check_hash_pressed temp
0000c9 3004                      	cpi temp, 0b00000100
0000ca f0f1                      	breq stopped_end
                                 	
0000cb e008
0000cc 2305                      	check_emulator temp
0000cd 3000                      	cpi temp, 0
0000ce f419                      	brne emulator_running
0000cf 9473                      	inc temp_counter	; used for the transition from config to emulate
0000d0 940c 00e9                 	jmp stopped_end
                                 
                                 emulator_running:
0000d2 e002
0000d3 2305                      	check_motor_running temp
0000d4 3002                      	cpi temp, 0b00000010
0000d5 f469                      	brne stopped		; motor not running, check stop time
                                 	; motor running, decrement time to next station
0000d6 e001                      	ldi temp, 1
0000d7 1a60                      	sub sec_left, temp
0000d8 1660                      	cp sec_left, temp	
0000d9 f47c                      	brge stopped_end
0000da ef0f                      	ldi temp, 0xFF		; flag next station
0000db 2e90                      	mov shift, temp		; shift used as a flag register
                                 	
                                 	; check for stop at next station
0000dc e001
0000dd 2305                      	check_next_stop temp
0000de 3001                      	cpi temp, 0b1
0000df f449                      	brne stopped_end		
                                 	; person wants to get off
0000e0 d38a                      	rcall stop_now		; stop motor as time was reached
0000e1 2c7b                      	mov temp_counter, stop_time
0000e2 7f5c                      	andi Treg, 0b11111100		; clear stop at next station and motor running bit
                                 	
                                 stopped: 
0000e3 e001                      	ldi temp, 1
0000e4 1a70                      	sub temp_counter, temp
0000e5 2700                      	clr temp
0000e6 1670                      	cp temp_counter, temp
0000e7 f40c                      	brge stopped_end
0000e8 d37d                      	rcall start_now		; restarts engine if stopped time is complete
                                 
                                 stopped_end:
0000e9 e7c9
0000ea e0d2
0000eb 2700
0000ec 9309
0000ed 8308                      	clear_ptr TC
0000ee c004                      	rjmp END_T0OVF
                                 
                                 Not_a_second:
0000ef 9380 0279                 	sts TC, NPL
0000f1 9390 027a                 	sts TC+1, NPH
                                 
                                 End_T0OVF:
0000f3 918f                      	pop NPl
0000f4 919f                      	pop NPH
0000f5 91cf                      	pop YL
0000f6 91df                      	pop YH
0000f7 910f                      	pop temp
0000f8 9518                      	reti
                                 
                                 ; scans keyboard to see what key is pressed
                                 main:
0000f9 d376                      	rcall next_or_clear		; see if to move to next line
0000fa d3bd                      	rcall sleep_5ms
0000fb d3bc                      	rcall sleep_5ms
                                 
                                 	;check for a flag to print next station and update travel time
0000fc e008
0000fd 2305                      	check_emulator temp
0000fe 3008                      	cpi temp, 0b00001000
0000ff f421                      	brne s_start
000100 ef0f                      	ldi temp, 0xFF
000101 1690                      	cp shift, temp
000102 f409                      	brne s_start
000103 d26c                      	rcall print_station
                                 
                                 
                                 s_start:
000104 ee3f                      	ldi mask, INITCOLMASK	; 0xEF
000105 2722                      	clr col
                                 
                                 colloop:
000106 9330 010b                 	sts PORTL, mask	; column to mask value (initially column 0 is off)
000108 ef0f                      	ser temp 
                                 
                                 delay: ;let hardware stabilize
000109 950a                      	dec temp
00010a 0000                      	nop
00010b f7e9                      	brne delay
00010c 9100 0109                 	LDS temp, PINL ; read PORTL. Cannot use in
                                 				   ; rows are inputs, cols are outputs 
00010e 700f                      	andi temp, ROWMASK ; read only the row bits
00010f 300f                      	cpi temp, 0xF ; check if any rows are grounded
000110 f061                      	breq nextcol ; if not go to the next column
000111 e031                      	ldi mask, INITROWMASK ; initialise row check
000112 2711                      	clr row ; initial row	
                                 
                                 rowloop:
000113 2f40                      	mov temp2, temp
000114 2343                      	and temp2, mask ; check masked bit
000115 f419                      	brne skipconv ; if the result is non-zero,
                                 	; we need to look again
000116 d011                      	rcall convert ; if bit is clear, convert the bitcode
000117 940c 00f9                 	jmp main ; and start again
                                 
                                 skipconv:
000119 9513                      	inc row ; else move to the next row
00011a 0f33                      	lsl mask ; shift the mask to the next bit
00011b 940c 0113                 	jmp rowloop 
                                 	
                                 nextcol:     
00011d 3023                      	cpi col, 3 ; check if we are on the last column
00011e f2d1                      	breq main ; if so, no buttons were pushed,
                                 	; so start again.
                                 
00011f 9408                      	sec ; else shift the column mask:
                                 	; We must set the carry bit
000120 1f33                      	rol mask ; and then rotate left by a bit,
                                 	; shifting the carry into
                                 	; bit zero. We need this to make
                                 	; sure all the rows have
                                 	; pull-up resistors
000121 9523                      	inc col ; increment column value
000122 940c 0106                 	jmp colloop ; and check the next column
                                 
                                 ; relative branch out of reach
                                 to_letters:
000124 940c 0187                 	jmp letters
                                 to_num_key:
000126 940c 0195                 	jmp num_key
                                 
                                 
                                 ; convert function converts the row and column given to a
                                 ; binary number and also outputs the value to PORTC.
                                 ; Inputs come from registers row and col and output is in
                                 ; temp.
                                 convert:
000128 3023                      	cpi col, 3 ; if column is 3 we have a letter
000129 f3d1                      	breq to_letters
00012a 3013                      	cpi row, 3 ; if row is 3 we have a symbol or 0
00012b f1a1                      	breq symbols
                                 
                                 	; we have a number 
00012c 2f01                      	mov temp, row ; otherwise we have a number (1-9)
00012d 0f00                      	lsl temp ; temp = row * 2
00012e 0f01                      	add temp, row ; temp = row * 3
00012f 0f02                      	add temp, col ; add the column address
                                 	; to get the offset from 1
000130 9503                      	inc temp ; add 1. Value of switch is
                                 	; row*3 + col + 1.
000131 2ef0                      	mov char_buff, temp
                                 
000132 e400
000133 2305                      	check_step2 temp
000134 3400                      	cpi temp, 0b01000000
000135 f781                      	brne to_num_key
                                 
                                 	;step 2 check, makes sure there is a shift
000136 e000                      	ldi temp, 0
000137 1690                      	cp shift, temp
000138 f129                      	breq no_valid_input
                                 
                                 	; processing for step 2
000139 2d0f                      	mov temp, char_buff
00013a 3001                      	cpi temp, 1
00013b f111                      	breq no_valid_input	; one is pressed, not valid
                                 
00013c e004                      	ldi temp, 4
00013d 1690                      	cp shift, temp 
00013e f040                      	brlo convert_to_letter		
                                 	; check for shift on keys 7, 9
00013f e007                      	ldi temp, 7					
000140 16f0                      	cp char_buff, temp
000141 f029                      	breq convert_to_letter
000142 e009                      	ldi temp, 9
000143 16f0                      	cp char_buff, temp
000144 f011                      	breq convert_to_letter
000145 940c 015e                 	jmp no_valid_input	; not valid letter pressed
                                 
                                 
                                 ; converts the shift and number to a character for storing station name 
                                 convert_to_letter: 
000147 e00a                      	ldi temp, 10
000148 16a0                      	cp n_length, temp
000149 f010                      	brlo continue_conversion
00014a 940c 01ad                 	jmp skip_keypress		; name limit reached, ignore letter 
                                 	
                                 continue_conversion:	
00014c 94a3                      	inc n_length			; character accepted, increment the count  
                                 
                                 	; conversion of number to keypad letter
00014d 2d0f                      	mov temp, char_buff 
00014e 5002                      	subi temp, 2
00014f 2f40                      	mov temp2, temp
000150 0f44                      	lsl temp2
000151 0f04                      	add temp, temp2
000152 0d09                      	add temp, shift
                                 
                                 	; check for 4 letter keys being entered
                                 	; 8 is shifted instead of seven due to the 'S' 
000153 e048                      	ldi temp2, 8	
000154 16f4                      	cp char_buff, temp2
000155 f409                      	brne next_check_
000156 9503                      	inc temp
                                 next_check_:
000157 e049                      	ldi temp2, 9
000158 16f4                      	cp char_buff, temp2
000159 f409                      	brne end_key_converstion
00015a 9503                      	inc temp
                                 
                                 end_key_converstion:
00015b 2ef0                      	mov char_buff, temp
00015c 940c 01a4                 	jmp convert_key
                                 
                                 no_valid_input:
00015e 940c 01ad                 	jmp skip_keypress
                                 	
                                 symbols:
000160 3020                      	cpi col, 0		; star is pressed
000161 f0b1                      	breq star_pressed
000162 3021                      	cpi col,1		; zero pressed
000163 f021                      	breq zero_pressed
                                 
                                 ;hash pressed, next instruction
000164 d364                      	rcall sleep_100ms
000165 d274                      	rcall next_step
000166 d362                      	rcall sleep_100ms
000167 9508                      	ret
                                 
                                 zero_pressed:
000168 24ff                      	clr char_buff
000169 2777                      	clr lcd_temp
                                 
                                 	;convert for step 1
00016a e800
00016b 2305                      	check_step1 temp
00016c 3800                      	cpi temp, 0b10000000
00016d f109                      	breq set_stat_num_
                                 
                                 	;convert for step 3
00016e e200
00016f 2305                      	check_step3 temp
000170 3200                      	cpi temp, 0b00100000
000171 f0f9                      	breq set_stat_time_
                                 
                                 	;convert for step 4
000172 e100
000173 2305                      	check_step4 temp
000174 3100                      	cpi temp, 0b00010000
000175 f0e9                      	breq set_stop_time_
                                 
                                 	; step 2 or emulator running, skip key press 
000176 940c 01ad                 	jmp skip_keypress
                                 
                                 star_pressed:
000178 e400
000179 2305                      	check_step2 temp
00017a 3400                      	cpi temp, 0b01000000
00017b f589                      	brne skip_keypress		; star only input during step 2 (space)
                                 
00017c e00a                      	ldi temp, 10			; limit reached
00017d 16a0                      	cp n_length, temp
00017e f010                      	brlo store_space
00017f 940c 01ad                 	jmp skip_keypress
                                 
                                 store_space:
                                 	; convert star to space
000181 e200                      	ldi temp, 32
000182 2f70                      	mov lcd_temp, temp
000183 9371                      	st z+, lcd_temp
000184 94a3                      	inc n_length
000185 940c 01ae                 	jmp convert_end
                                 
                                 letters:
000187 e440                      	ldi temp2, 0b01000000
000188 2345                      	and temp2, Treg
000189 3440                      	cpi temp2, 0b01000000
00018a f511                      	brne skip_keypress		; Letters are only valid in step 2
                                 
00018b 2e91                      	mov shift, row
00018c 9493                      	inc shift				; increment the row number to get the shift amount 
00018d b898                      	out PORTC, shift
00018e 9508                      	ret
                                 
                                 ;relative branches out of reach
                                 set_stat_num_:
00018f 940c 01bb                 	jmp set_stat_num
                                 set_stat_time_:
000191 940c 01d2                 	jmp set_stat_time
                                 set_stop_time_:
000193 940c 01eb                 	jmp set_stop_time
                                 
                                 num_key: 
000195 2d7f                      	mov lcd_temp, char_buff ; store number into output register
                                 	
                                 	;step 1 
000196 e800
000197 2305                      	check_step1 temp
000198 3800                      	cpi temp, 0b10000000
000199 f109                      	breq set_stat_num		; step 1, stores max stations
                                 
                                 	;step 3				
00019a e200
00019b 2305                      	check_step3 temp
00019c 3200                      	cpi temp, 0b00100000
00019d f1a1                      	breq set_stat_time		; stores station transit time 
                                 
                                 	;step 4 check
00019e e100
00019f 2305                      	check_step4 temp		; stores station stop time
0001a0 3100                      	cpi temp, 0b00010000
0001a1 f389                      	breq set_stop_time_
                                 
0001a2 940c 01ad                 	jmp skip_keypress		; number is pressed during step two or emulator, ignore
                                 
                                 convert_key:
0001a4 2d0f                      	mov temp, char_buff
0001a5 6400                      	ori temp, 0b01000000			; convert to ASCII 
0001a6 2f70                      	mov lcd_temp, temp
0001a7 9371                      	st z+, lcd_temp			; store station name in memory for emulator 
0001a8 940c 01ae                 	jmp convert_end
                                 
                                 convert_lcd_num:
0001aa 6370                      	ori lcd_temp, 0b00110000
0001ab 940c 01ae                 	jmp convert_end
                                 
                                 skip_keypress:
0001ad 9508                      	ret
                                 
                                 convert_end:
0001ae 9100 0109                 	LDS temp, PINL
0001b0 2ee0                      	mov flag, temp
0001b1 2f07
0001b2 d2da
0001b3 d2e8                      	do_lcd_data lcd_temp
0001b4 9563                      	inc n_chars
                                 
                                 preserve: 
0001b5 d302                      	rcall sleep_5ms
0001b6 9100 0109                 	lds temp, PINL
0001b8 150e                      	cp temp, flag
0001b9 f3d9                      	breq preserve
0001ba 9508                      	ret
                                 
                                 
                                 
                                 ;sets maximum number of stations 
                                 set_stat_num:
0001bb e7a8
0001bc e0b2                      	ld_in_ptr xl, xh, stations	; retrieve number of stations from storage 
0001bd 910c                      	ld temp, x 
0001be 2f40
0001bf 2ed0
0001c0 e009
0001c1 0d4d
0001c2 5001
0001c3 3001
0001c4 f7e4
0001c5 2f04
0001c6 f00b
0001c7 c001
0001c8 e800                      	mul_by_10 temp				; multiply previous stored number by ten
0001c9 0d0f                      	add temp, char_buff			; add current number and compare with 10
0001ca 300b                      	cpi temp, 11
0001cb f010                      	brlo store_stat_max
0001cc 2700                      	clr temp					; if over ten, store only the last digit entered from char_buff
0001cd 2d0f                      	mov temp, char_buff	 
                                 store_stat_max:
0001ce 2ef0                      	mov char_buff, temp
0001cf 92fc                      	st x, char_buff
0001d0 940c 01aa                 	jmp convert_lcd_num 
                                 
                                 ;sets time between two stations 
                                 set_stat_time:
0001d2 94a3                      	inc n_length			
0001d3 e042                      	ldi temp2, 2
0001d4 2d0f                      	mov temp, char_buff
0001d5 16a4                      	cp n_length, temp2		; sees if a number was previously stored
0001d6 f080                      	brlo store_station_time
0001d7 8100                      	ld temp, z	
0001d8 2f40
0001d9 2ed0
0001da e009
0001db 0d4d
0001dc 5001
0001dd 3001
0001de f7e4
0001df 2f04
0001e0 f00b
0001e1 c001
0001e2 e800                      	mul_by_10 temp
0001e3 0d0f                      	add temp, char_buff
0001e4 300b                      	cpi temp, 11
0001e5 f008                      	brlo store_station_time					
0001e6 2d0f                      	mov temp, char_buff	 
                                 store_station_time:		; if over ten, store only the last digit entered from char_buff
0001e7 2ef0                      	mov char_buff, temp
0001e8 82f0                      	st z, char_buff
0001e9 940c 01aa                 	jmp convert_lcd_num 
                                 
                                 ;sets the stop time
                                 set_stop_time:
0001eb 2d0f                      	mov temp, char_buff
0001ec 3002                      	cpi temp, 2
0001ed f418                      	brsh next_check
0001ee e002                      	ldi temp, 2
0001ef 2ef0                      	mov char_buff, temp
0001f0 c004                      	rjmp store_stop_time
                                 
                                 
                                 next_check:
0001f1 3006                      	cpi temp, 6
0001f2 f010                      	brlo store_stop_time
0001f3 e005                      	ldi temp, 5
0001f4 2ef0                      	mov char_buff, temp
                                 	
                                 store_stop_time:
0001f5 94a3                      	inc n_length
0001f6 2cbf                      	mov stop_time, char_buff
0001f7 940c 01aa                 	jmp convert_lcd_num
                                 
                                 ; display to read the number of stations
                                 step_1:
0001f9 e001
0001fa d287
0001fb d2a0                      	do_lcd_command 0b1		; clear display
0001fc 7057                      	andi Treg, 0b00000111	; set flag for inputting number of stations 
0001fd 6850                      	ori Treg, 0b10000000
                                 	
0001fe e40d
0001ff d28d
000200 d29b                      	do_lcd_data_l 'M'
000201 e401
000202 d28a
000203 d298                      	do_lcd_data_l 'A'
000204 e508
000205 d287
000206 d295                      	do_lcd_data_l 'X'
000207 e200
000208 d284
000209 d292                      	do_lcd_data_l ' '
00020a e503
00020b d281
00020c d28f                      	do_lcd_data_l 'S'
00020d e504
00020e d27e
00020f d28c                      	do_lcd_data_l 'T'
000210 e401
000211 d27b
000212 d289                      	do_lcd_data_l 'A'
000213 e504
000214 d278
000215 d286                      	do_lcd_data_l 'T'
000216 e409
000217 d275
000218 d283                      	do_lcd_data_l 'I'
000219 e40f
00021a d272
00021b d280                      	do_lcd_data_l 'O'
00021c e40e
00021d d26f
00021e d27d                      	do_lcd_data_l 'N'
00021f e503
000220 d26c
000221 d27a                      	do_lcd_data_l 'S'
000222 e160                      	ldi n_chars, 16
000223 d24c                      	rcall next_or_clear
000224 e20d
000225 d267
000226 d275                      	do_lcd_data_l '-'
000227 e30e
000228 d264
000229 d272                      	do_lcd_data_l '>'
00022a 5f6e                      	subi n_chars, -2
00022b 9508                      	ret
                                 
                                 ; read the names of each station
                                 step_2:
00022c e001
00022d d254
00022e d26d                      	do_lcd_command 0b1		; clear display
00022f 7057                      	andi Treg, 0b00000111	; set flag for inputting names 
000230 6450                      	ori Treg, 0b01000000
                                 	
000231 e503
000232 d25a
000233 d268                      	do_lcd_data_l 'S'
000234 e504
000235 d257
000236 d265                      	do_lcd_data_l 'T'
000237 e401
000238 d254
000239 d262                      	do_lcd_data_l 'A'
00023a e504
00023b d251
00023c d25f                      	do_lcd_data_l 'T'
00023d e409
00023e d24e
00023f d25c                      	do_lcd_data_l 'I'
000240 e40f
000241 d24b
000242 d259                      	do_lcd_data_l 'O'
000243 e40e
000244 d248
000245 d256                      	do_lcd_data_l 'N'
000246 e200
000247 d245
000248 d253                      	do_lcd_data_l ' '
                                 
                                 	;output station name you are getting 
000249 2d0c                      	mov temp, current_station
00024a 300a                      	cpi temp, 10			; cases with 10 stations
00024b f038                      	brlo output_number
00024c e301
00024d d23f
00024e d24d                      	do_lcd_data_l '1'
00024f e300
000250 d23c
000251 d24a                      	do_lcd_data_l '0'		; 10 is the max station
000252 c004                      	rjmp step_2_continue
                                 output_number:
000253 6300                      	ori temp, 0b00110000
000254 2f00
000255 d237
000256 d245                      	do_lcd_data temp 
                                 
                                 step_2_continue:
000257 e200
000258 d234
000259 d242                      	do_lcd_data_l ' '
00025a e40e
00025b d231
00025c d23f                      	do_lcd_data_l 'N'
00025d e401
00025e d22e
00025f d23c                      	do_lcd_data_l 'A'
000260 e40d
000261 d22b
000262 d239                      	do_lcd_data_l 'M'
000263 e405
000264 d228
000265 d236                      	do_lcd_data_l 'E'
000266 e160                      	ldi n_chars, 16
000267 d208                      	rcall next_or_clear
000268 e20d
000269 d223
00026a d231                      	do_lcd_data_l '-'
00026b e30e
00026c d220
00026d d22e                      	do_lcd_data_l '>'
00026e 5f6e                      	subi n_chars, -2
00026f d259                      	rcall sleep_100ms
000270 9508                      	ret
                                 
                                 ; step to get travel times between stations
                                 step_3:
000271 e001
000272 d20f
000273 d228                      	do_lcd_command 0b1		; clear display
000274 7057                      	andi Treg, 0b00000111	; set flag for inputting travel times 
000275 6250                      	ori Treg, 0b00100000
                                 
000276 e503
000277 d215
000278 d223                      	do_lcd_data_l 'S'
000279 e504
00027a d212
00027b d220                      	do_lcd_data_l 'T' 
                                  
00027c 2d0c                      	mov temp, current_station
00027d 300a                      	cpi temp, 10			; cases with 10 stations
00027e f038                      	brlo output_number_1
00027f e301
000280 d20c
000281 d21a                      	do_lcd_data_l '1'
000282 e300
000283 d209
000284 d217                      	do_lcd_data_l '0'		; 10 is the max station
000285 c005                      	rjmp step_3_continue1
                                 output_number_1:
000286 6300                      	ori temp, 0b00110000
000287 2f00
000288 d204
000289 d212                      	do_lcd_data temp
00028a 94c3                      	inc current_station
                                 
                                 step_3_continue1:
00028b e200
00028c d200
00028d d20e                      	do_lcd_data_l ' '
00028e e504
00028f d1fd
000290 d20b                      	do_lcd_data_l 'T'
000291 e40f
000292 d1fa
000293 d208                      	do_lcd_data_l 'O'
000294 e200
000295 d1f7
000296 d205                      	do_lcd_data_l ' '
000297 e503
000298 d1f4
000299 d202                      	do_lcd_data_l 'S'
00029a e504
00029b d1f1
00029c d1ff                      	do_lcd_data_l 'T'
                                 	
00029d 2d0c                      	mov temp, current_station
00029e 300a                      	cpi temp, 10			; cases with 10 stations
00029f f038                      	brlo output_number_2
0002a0 e301
0002a1 d1eb
0002a2 d1f9                      	do_lcd_data_l '1'
0002a3 e300
0002a4 d1e8
0002a5 d1f6                      	do_lcd_data_l '0'		; 10 is the max station
0002a6 c004                      	rjmp step_3_continue2
                                 output_number_2:
0002a7 6300                      	ori temp, 0b00110000
0002a8 2f00
0002a9 d1e3
0002aa d1f1                      	do_lcd_data temp
                                 
                                 step_3_continue2:
0002ab e200
0002ac d1e0
0002ad d1ee                      	do_lcd_data_l ' '
0002ae e504
0002af d1dd
0002b0 d1eb                      	do_lcd_data_l 'T'
0002b1 e409
0002b2 d1da
0002b3 d1e8                      	do_lcd_data_l 'I'
0002b4 e40d
0002b5 d1d7
0002b6 d1e5                      	do_lcd_data_l 'M'
0002b7 e405
0002b8 d1d4
0002b9 d1e2                      	do_lcd_data_l 'E'
0002ba e160                      	ldi n_chars, 16
0002bb d1b4                      	rcall next_or_clear
0002bc e20d
0002bd d1cf
0002be d1dd                      	do_lcd_data_l '-'
0002bf e30e
0002c0 d1cc
0002c1 d1da                      	do_lcd_data_l '>'
0002c2 5f6e                      	subi n_chars, -2
0002c3 d205                      	rcall sleep_100ms
0002c4 9508                      	ret
                                 
                                 step_4:	
0002c5 e001
0002c6 d1bb
0002c7 d1d4                      	do_lcd_command 0b1		; clear display
0002c8 7057                      	andi Treg, 0b00000111	; set flag for inputting travel times 
0002c9 6150                      	ori Treg, 0b00010000	
                                 
0002ca e40d
0002cb d1c1
0002cc d1cf                      	do_lcd_data_l 'M'
0002cd e502
0002ce d1be
0002cf d1cc                      	do_lcd_data_l 'R'
0002d0 e401
0002d1 d1bb
0002d2 d1c9                      	do_lcd_data_l 'A'
0002d3 e409
0002d4 d1b8
0002d5 d1c6                      	do_lcd_data_l 'I'
0002d6 e40c
0002d7 d1b5
0002d8 d1c3                      	do_lcd_data_l 'L'
0002d9 e200
0002da d1b2
0002db d1c0                      	do_lcd_data_l ' '
0002dc e503
0002dd d1af
0002de d1bd                      	do_lcd_data_l 'S'
0002df e504
0002e0 d1ac
0002e1 d1ba                      	do_lcd_data_l 'T'
0002e2 e40f
0002e3 d1a9
0002e4 d1b7                      	do_lcd_data_l 'O'
0002e5 e500
0002e6 d1a6
0002e7 d1b4                      	do_lcd_data_l 'P'
0002e8 e200
0002e9 d1a3
0002ea d1b1                      	do_lcd_data_l ' '
0002eb e504
0002ec d1a0
0002ed d1ae                      	do_lcd_data_l 'T'
0002ee e409
0002ef d19d
0002f0 d1ab                      	do_lcd_data_l 'I'
0002f1 e40d
0002f2 d19a
0002f3 d1a8                      	do_lcd_data_l 'M'
0002f4 e405
0002f5 d197
0002f6 d1a5                      	do_lcd_data_l 'E'
0002f7 e160                      	ldi n_chars, 16
0002f8 d177                      	rcall next_or_clear
0002f9 e20d
0002fa d192
0002fb d1a0                      	do_lcd_data_l '-'
0002fc e30e
0002fd d18f
0002fe d19d                      	do_lcd_data_l '>'
0002ff 5f6e                      	subi n_chars, -2
000300 d1c8                      	rcall sleep_100ms
000301 9508                      	ret
                                 
                                 ; configuration complete!
                                 step_5:
000302 e001
000303 d17e
000304 d197                      	do_lcd_command 0b1		; clear display
000305 2755                      	clr Treg	; clear instruction flags
                                 
000306 e403
000307 d185
000308 d193                      	do_lcd_data_l 'C'
000309 e40f
00030a d182
00030b d190                      	do_lcd_data_l 'O'
00030c e40e
00030d d17f
00030e d18d                      	do_lcd_data_l 'N'
00030f e406
000310 d17c
000311 d18a                      	do_lcd_data_l 'F'
000312 e409
000313 d179
000314 d187                      	do_lcd_data_l 'I'
000315 e407
000316 d176
000317 d184                      	do_lcd_data_l 'G'
000318 e200
000319 d173
00031a d181                      	do_lcd_data_l ' '
00031b e403
00031c d170
00031d d17e                      	do_lcd_data_l 'C'
00031e e40f
00031f d16d
000320 d17b                      	do_lcd_data_l 'O'
000321 e40d
000322 d16a
000323 d178                      	do_lcd_data_l 'M'
000324 e500
000325 d167
000326 d175                      	do_lcd_data_l 'P'
000327 e40c
000328 d164
000329 d172                      	do_lcd_data_l 'L'
00032a e405
00032b d161
00032c d16f                      	do_lcd_data_l 'E'
00032d e504
00032e d15e
00032f d16c                      	do_lcd_data_l 'T'
000330 e405
000331 d15b
000332 d169                      	do_lcd_data_l 'E'
000333 e160                      	ldi n_chars, 16
000334 d13b                      	rcall next_or_clear
000335 e507
000336 d156
000337 d164                      	do_lcd_data_l 'W'
000338 e401
000339 d153
00033a d161                      	do_lcd_data_l 'A'
00033b e409
00033c d150
00033d d15e                      	do_lcd_data_l 'I'
00033e e504
00033f d14d
000340 d15b                      	do_lcd_data_l 'T'
000341 e20e
000342 d14a
000343 d158                      	do_lcd_data_l '.'
000344 e20e
000345 d147
000346 d155                      	do_lcd_data_l '.'
000347 e20e
000348 d144
000349 d152                      	do_lcd_data_l '.'
00034a 5f6c                      	subi n_chars, -4
                                 
                                 	; load proper pointers
00034b e7a8
00034c e0b2                      	ld_in_ptr xl, xh, stations			; load max number of station
00034d 910c                      	ld temp, x
00034e 2e80                      	mov max_stations, temp
00034f e002                      	ldi temp, 2
000350 2ec0                      	mov current_station, temp
000351 e68e
000352 e092                      	ld_in_ptr NPL, NPH, stat_times		; NP holds address to stop times
000353 2e38                      	mov r3, NPL
000354 2e49                      	mov r4, NPH
000355 e0a0
000356 e0b2                      	ld_in_ptr xl, xh, stat_names		; x holds pointer to station names
000357 e6e4
000358 e0f2                      	ld_in_ptr zl, zh, stat_char_nums	; z holds pointer to name lengths
                                 
                                 	;get pointer to point to station 2
000359 9101                      	ld temp, z+
00035a 2499                      	clr shift
00035b 2744                      	clr temp2
00035c 0fa0                      	add xl, temp
00035d 1fb4                      	adc xh, temp2	; gets station name of next station
00035e 2466                      	clr sec_left
00035f 2477                      	clr temp_counter
                                 
                                 ;enable timer0
                                 start_timer0:
000360 2700                      	clr temp
000361 bd04                      	out TCCR0A, temp
000362 e005                      	ldi temp, 0b00000101
000363 bd05                      	out TCCR0B, temp	; set prescalar value to 1024
000364 e001                      	ldi temp, (1<<TOIE0)
000365 9300 006e                 	sts TIMSK0, temp	; enable overflow interrupt
000367 9478                      	sei
                                 
                                 ; 5 second loop buffer for emulator start
                                 loop_start:
000368 e005                      	ldi temp, 5
000369 1670                      	cp temp_counter, temp
00036a f408                      	brsh end
00036b cffc                      	rjmp loop_start
                                 
                                 end:
00036c 6058                      	ori TREG, 0b00001000	; set emulator running flag
00036d d0f8                      	rcall start_now			; start motor
00036e d001                      	rcall print_station
00036f 9508                      	ret
                                 
                                 ; displays next station on screen
                                 print_station:
                                 	; next station print
000370 e001
000371 d110
000372 d129                      	do_lcd_command 0b01
000373 e00c
000374 d10d
000375 d126                      	do_lcd_command 0b00001100 ; no cursor, no bar, no blink
                                 
000376 e40e
000377 d115
000378 d123                      	do_lcd_data_l 'N'
000379 e405
00037a d112
00037b d120                      	do_lcd_data_l 'E'
00037c e508
00037d d10f
00037e d11d                      	do_lcd_data_l 'X'
00037f e504
000380 d10c
000381 d11a                      	do_lcd_data_l 'T'
000382 e200
000383 d109
000384 d117                      	do_lcd_data_l ' '
000385 e503
000386 d106
000387 d114                      	do_lcd_data_l 'S'
000388 e504
000389 d103
00038a d111                      	do_lcd_data_l 'T'
00038b e401
00038c d100
00038d d10e                      	do_lcd_data_l 'A'
00038e e504
00038f d0fd
000390 d10b                      	do_lcd_data_l 'T'
000391 e409
000392 d0fa
000393 d108                      	do_lcd_data_l 'I'
000394 e40f
000395 d0f7
000396 d105                      	do_lcd_data_l 'O'
000397 e40e
000398 d0f4
000399 d102                      	do_lcd_data_l 'N'
00039a e160                      	ldi n_chars, 16
00039b d0d4                      	rcall next_or_clear
                                 
                                 	; check for last station
00039c 2d08                      	mov temp, max_stations
00039d 148c                      	cp max_stations, current_station
00039e f434                      	brge contine_printing
00039f e001                      	ldi temp, 1
0003a0 2ec0                      	mov current_station, temp			; get station 1
0003a1 e6e4
0003a2 e0f2                      	ld_in_ptr zl, zh, stat_char_nums	; get number of characters for station 1
0003a3 e0a0
0003a4 e0b2                      	ld_in_ptr xl, xh, stat_names		; get station 1 name
                                 
                                 
                                 	; check for no input
                                 
                                 	; load in important values
                                 contine_printing:
0003a5 90a1                      	ld n_length, z+		; get length of name
0003a6 2f0e                      	mov temp, zl
0003a7 2f4f                      	mov temp2, zh
0003a8 2fe8                      	mov zl, NPL
0003a9 2ff9                      	mov zh, NPH
0003aa 9061                      	ld sec_left, z+	; get stop time to next station
0003ab 2f8e                      	mov NPL, zl
0003ac 2f9f                      	mov NPH, zh
0003ad 2fe0                      	mov zl, temp
0003ae 2ff4                      	mov zh, temp2		; reset pointers to next point
                                 
0003af e001                      	ldi temp, 1
0003b0 16c0                      	cp current_station, temp
0003b1 f411                      	brne name_sendout_start
0003b2 e68e
0003b3 e092                      	ld_in_ptr NPL, NPH, stat_times	; reset travel time between station
                                 	 
                                 name_sendout_start:
0003b4 e000                      	ldi temp, 0
0003b5 16a0                      	cp n_length, temp
0003b6 f091                      	breq no_chars			; no characters were typed 
                                 	
0003b7 917d                      	ld lcd_temp, x+
0003b8 d0ff                      	rcall sleep_5ms
0003b9 2f07
0003ba d0d2
0003bb d0e0                      	do_lcd_data lcd_temp	; send out letter
0003bc d0fb                      	rcall sleep_5ms
                                 
0003bd e001                      	ldi temp,1
0003be 1aa0                      	sub n_length, temp		; subtract from characters remaining
0003bf 16a0                      	cp n_length, temp
0003c0 f798                      	brsh name_sendout_start
                                 
                                 before_end: 
                                 	; do not start the motor if it was not running previously 
0003c1 e002
0003c2 2305                      	check_motor_running temp
0003c3 3000                      	cpi temp, 0
0003c4 f009                      	breq end_print
0003c5 d0a0                      	rcall start_now		; start_motor
                                 
                                 end_print:
0003c6 94c3                      	inc current_station
0003c7 2499                      	clr shift
0003c8 9508                      	ret
                                 
                                 ; handles cases where no letter was typed
                                 no_chars:
0003c9 e00a                      	ldi temp, 10
0003ca 150c                      	cp temp, current_station	; stations higher than ten
0003cb f039                      	breq print_10
                                 
0003cc 2d7c                      	mov lcd_temp, current_station
0003cd 6370                      	ori lcd_temp, 0b00110000
0003ce 2f07
0003cf d0bd
0003d0 d0cb                      	do_lcd_data lcd_temp
0003d1 d0e6                      	rcall sleep_5ms
0003d2 cfee                      	rjmp before_end
                                 
                                 print_10:
0003d3 e301
0003d4 d0b8
0003d5 d0c6                      	do_lcd_data_l '1'
0003d6 e300
0003d7 d0b5
0003d8 d0c3                      	do_lcd_data_l '0'
0003d9 cfe7                      	rjmp before_end
                                 	
                                 
                                 next_step:
0003da e800
0003db 2305                      	check_step1 temp
0003dc 3800                      	cpi temp, 0b10000000
0003dd f089                      	breq store_step1
                                 
0003de e400
0003df 2305                      	check_step2 temp
0003e0 3400                      	cpi temp, 0b01000000
0003e1 f121                      	breq store_step2
                                 
0003e2 e200
0003e3 2305                      	check_step3 temp
0003e4 3200                      	cpi temp, 0b00100000
0003e5 f1a1                      	breq store_step3
                                 
0003e6 e100
0003e7 2305                      	check_step4 temp
0003e8 3100                      	cpi temp, 0b00010000
0003e9 f0c1                      	breq store_step_4
                                 
0003ea e008
0003eb 2305                      	check_emulator temp
0003ec 3008                      	cpi temp, 0b00001000
0003ed f0b1                      	breq check_motor_stop
0003ee 9508                      	ret
                                 	
                                 
                                 ;stores step one 
                                 store_step1:
0003ef e7a8
0003f0 e0b2                      	ld_in_ptr xl, xh, stations
0003f1 910c                      	ld temp, x
0003f2 3002                      	cpi temp, 2
0003f3 f410                      	brsh move_to_step_two
0003f4 e00a                      	ldi temp, 10
0003f5 930c                      	st x, temp ; number of stations is less than 2, the max is entered 
                                 move_to_step_two:
0003f6 e001                      	ldi temp, 1
0003f7 2ec0                      	mov current_station, temp	; for step 2, enter the name of station 1
0003f8 24aa                      	clr n_length
0003f9 2499                      	clr shift
0003fa e0e0
0003fb e0f2                      	ld_in_ptr zl, zh, stat_names
0003fc e6c4
0003fd e0d2                      	ld_in_ptr yl, yh, stat_char_nums		; load in the start of memory for station names and lengths 
0003fe de2d                      	rcall step_2;			; call step 2
0003ff 9508                      	ret
                                 
                                 
                                 store_step_3:
000400 940c 041a                 	jmp store_step3
                                 store_step_4:					;  relative jump out of reach
000402 940c 0454                 	jmp store_step4
                                 check_motor_stop:
000404 940c 045b                 	jmp motor_stop
                                 
                                 
                                 ;store station name and move to step 3 if last station 
                                 store_step2:
                                 	; store station name
000406 92a9                      	st y+, n_length
000407 24aa                      	clr n_length
000408 94c3                      	inc current_station
000409 e7a8
00040a e0b2                      	ld_in_ptr xl, xh, stations
00040b 910c                      	ld temp, x
00040c 9503                      	inc temp
00040d 16c0                      	cp current_station, temp
00040e f011                      	breq move_to_step3			; last station stored
00040f de1c                      	rcall step_2
000410 9508                      	ret
                                 move_to_step3:
000411 24aa                      	clr n_length
000412 e6ee
000413 e0f2                      	ld_in_ptr zl, zh, stat_times			; z pointer holds the current between station time position 
                                 
000414 e001                      	ldi temp, 1					; set station back to one 
000415 2ec0                      	mov current_station, temp
000416 2700                      	clr temp
000417 b908                      	out PORTC, temp
000418 de58                      	rcall step_3
000419 9508                      	ret
                                 
                                 ;called to store the distance between two stations and move to step 4
                                 store_step3:
00041a e001                      	ldi temp, 1			; check for typed number 
00041b 16a0                      	cp n_length, temp
00041c f418                      	brsh zero_check	
                                 	;hash is pressed without a number being typed, defaults to 5 second
00041d e005                      	ldi temp, 5
00041e 8300                      	st z, temp
00041f c005                      	rjmp increment_ptr
                                 
                                 zero_check:				; check to see if zero is the value in the char buffer
000420 8100                      	ld temp, z
000421 3000                      	cpi temp, 0	
000422 f411                      	brne increment_ptr
                                 	; zero is the last number entered, defaults time to 1 sec
000423 e001                      	ldi temp, 1
000424 8300                      	st z, temp
                                 
                                 increment_ptr:  
000425 8100                      	ld temp, z
                                 	
000426 e001                      	ldi temp, 1		; increment to next position 
000427 0fe0                      	add zl, temp
000428 2700                      	clr temp
000429 1ff0                      	adc zh, temp
                                 	; store travel time 
                                 
00042a e7a8
00042b e0b2                      	ld_in_ptr xl, xh, stations
00042c 910c                      	ld temp, x
00042d 150c                      	cp temp, current_station
00042e f029                      	breq last_stop_time
00042f 2d0c                      	mov temp, current_station			; moves to step 4 after last travel time is stored
000430 3001                      	cpi temp, 1
000431 f0e9                      	breq move_to_step4
000432 de3e                      	rcall step_3
000433 9508                      	ret
                                 
                                 last_stop_time: 
000434 e001
000435 d04c
000436 d065                      	do_lcd_command 0b1		; clear display
                                 
000437 e503
000438 d054
000439 d062                      	do_lcd_data_l 'S'
00043a e504
00043b d051
00043c d05f                      	do_lcd_data_l 'T'
                                 	
00043d 2d0c                      	mov temp, current_station
00043e 300a                      	cpi temp, 10			; cases with 10 stations
00043f f038                      	brlo output_number_l
000440 e301
000441 d04b
000442 d059                      	do_lcd_data_l '1'
000443 e300
000444 d048
000445 d056                      	do_lcd_data_l '0'		; 10 is the max station
000446 c004                      	rjmp lst_contd
                                 output_number_l:
000447 6300                      	ori temp, 0b00110000
000448 2f00
000449 d043
00044a d051                      	do_lcd_data temp
                                 
                                 lst_contd:
00044b e001                      	ldi temp, 1					; last station is one
00044c 2ec0                      	mov current_station, temp
00044d de3d                      	rcall step_3_continue1
00044e 9508                      	ret
                                 
                                 move_to_step4:
00044f 24aa                      	clr n_length	
000450 e001                      	ldi temp, 1		; goes back to station one for emulation 
000451 2ec0                      	mov current_station, temp
000452 de72                      	rcall step_4
000453 9508                      	ret
                                 
                                 ; completes step 4
                                 store_step4:
                                 	;check for proper input 
000454 2700                      	clr temp
000455 e045                      	ldi temp2, 5
000456 150a                      	cp temp, n_length
000457 f409                      	brne move_to_step5		; a number was entered
000458 2eb4                      	mov stop_time, temp2
                                 
                                 move_to_step5:
000459 dea8                      	rcall step_5
00045a 9508                      	ret 
                                 
                                 motor_stop:
00045b e004
00045c 2305                      	check_hash_pressed temp
00045d 3004                      	cpi temp, 0b00000100
00045e f021                      	breq start_motor		; second hash press in emulator, ignore 
                                 	; stop motor
00045f d00b                      	rcall stop_now
000460 705d                      	andi Treg, 0b00001101
000461 605c                      	ori Treg, 0b00001100	; set hash pressed flag 
000462 9508                      	ret 
                                 start_motor:
000463 d002                      	rcall start_now
000464 705b                      	andi treg, 0b00001011	; set flag 
000465 9508                      	ret
                                 
                                 
                                 	; starts motor
                                 start_now:
000466 6052                      	ori Treg, 0b00000010
000467 e30c                      	ldi temp, 60
000468 9300 009a                 	sts OCR3BL, temp
00046a 9508                      	ret
                                 
                                 ; stops motor
                                 stop_now:
00046b 705d                      	andi Treg, 0b00001101
00046c e000                      	ldi temp, 0
00046d 9300 009a                 	sts OCR3BL, temp
00046f 9508                      	ret
                                 	
                                 
                                 ; determines if to go onto next line or clear
                                 next_or_clear:
000470 3160                      	cpi n_chars, 16
000471 f019                      	breq next_line 
000472 3260                      	cpi n_chars, 32
000473 f039                      	breq clear
000474 9508                      	ret
                                 
                                 next_line:
000475 9817                      	lcd_clr LCD_RS
000476 9815                      	lcd_clr LCD_RW
000477 ec00
000478 d009
000479 d022                      	do_lcd_command 0b11000000
00047a 9508                      	ret
                                 
                                 clear:
00047b 9817                      	lcd_clr LCD_RS
00047c 9815                      	lcd_clr LCD_RW
00047d e001
00047e d003
00047f d01c                      	do_lcd_command 0b00000001
000480 2766                      	clr n_chars
000481 9508                      	ret
                                 
                                 ;
                                 ; Send a command to the LCD (r16)
                                 ;
                                 
                                 lcd_command:
000482 bb01                      	out PORTF, r16
000483 0000                      	nop
000484 9a16                      	lcd_set LCD_E
000485 0000                      	nop
000486 0000                      	nop
000487 0000                      	nop
000488 9816                      	lcd_clr LCD_E
000489 0000                      	nop
00048a 0000                      	nop
00048b 0000                      	nop
00048c 9508                      	ret
                                 
                                 lcd_data:
00048d bb01                      	out PORTF, r16
00048e 9a17                      	lcd_set LCD_RS
00048f 0000                      	nop
000490 0000                      	nop
000491 0000                      	nop
000492 9a16                      	lcd_set LCD_E
000493 0000                      	nop
000494 0000                      	nop
000495 0000                      	nop
000496 9816                      	lcd_clr LCD_E
000497 0000                      	nop
000498 0000                      	nop
000499 0000                      	nop
00049a 9817                      	lcd_clr LCD_RS
00049b 9508                      	ret
                                 
                                 lcd_wait:
00049c 930f                      	push r16
00049d 2700                      	clr r16
00049e bb00                      	out DDRF, r16
00049f bb01                      	out PORTF, r16
0004a0 9a15                      	lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
0004a1 0000                      	nop
0004a2 9a16                      	lcd_set LCD_E
0004a3 0000                      	nop
0004a4 0000                      	nop
0004a5 0000                          nop
0004a6 b10f                      	in r16, PINF
0004a7 9816                      	lcd_clr LCD_E
0004a8 fd07                      	sbrc r16, 7
0004a9 cff7                      	rjmp lcd_wait_loop
0004aa 9815                      	lcd_clr LCD_RW
0004ab ef0f                      	ser r16
0004ac bb00                      	out DDRF, r16
0004ad 910f                      	pop r16
0004ae 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0004af 938f                      	push r24
0004b0 939f                      	push r25
0004b1 e09f                      	ldi r25, high(DELAY_1MS)
0004b2 e98c                      	ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
0004b3 9701                      	sbiw r25:r24, 1
0004b4 f7f1                      	brne delayloop_1ms
0004b5 919f                      	pop r25
0004b6 918f                      	pop r24
0004b7 9508                      	ret
                                 
                                 sleep_5ms:
0004b8 dff6                      	rcall sleep_1ms
0004b9 dff5                      	rcall sleep_1ms
0004ba dff4                      	rcall sleep_1ms
0004bb dff3                      	rcall sleep_1ms
0004bc dff2                      	rcall sleep_1ms
0004bd 9508                      	ret
                                 
                                 sleep_50ms:
0004be dff9                      	rcall sleep_5ms
0004bf dff8                      	rcall sleep_5ms
0004c0 dff7                      	rcall sleep_5ms
0004c1 dff6                      	rcall sleep_5ms
0004c2 dff5                      	rcall sleep_5ms
0004c3 dff4                      	rcall sleep_5ms
0004c4 dff3                      	rcall sleep_5ms
0004c5 dff2                      	rcall sleep_5ms
0004c6 dff1                      	rcall sleep_5ms
0004c7 dff0                      	rcall sleep_5ms
0004c8 9508                      	ret
                                 
                                 sleep_100ms:
0004c9 dff4                      	rcall sleep_50ms
0004ca dff3                      	rcall sleep_50ms
0004cb 9508                      	ret
                                 
                                 sleep_500ms:
0004cc dffc                      	rcall sleep_100ms
0004cd dffb                      	rcall sleep_100ms
0004ce dffa                      	rcall sleep_100ms
0004cf dff9                      	rcall sleep_100ms
0004d0 dff8                      	rcall sleep_100ms
0004d1 9508                      	ret
                                 
                                 sleep_1s:
0004d2 dff9                      	rcall sleep_500ms
0004d3 dff8                      	rcall sleep_500ms


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   9 y  :   5 z  :  11 r0 :   0 r1 :   0 r2 :   0 r3 :   1 r4 :   1 
r5 :   0 r6 :   5 r7 :   6 r8 :   3 r9 :  12 r10:  19 r11:   4 r12:  21 
r13:   4 r14:   2 r15:  25 r16: 451 r17:   6 r18:   7 r19:   6 r20:  26 
r21:  44 r22:  17 r23:  13 r24:  18 r25:  18 r26:   9 r27:   9 r28:   5 
r29:   5 r30:   9 r31:   9 
Registers used: 31 out of 35 (88.6%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :  10 adiw  :   1 and   :  26 
andi  :   9 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  38 brge  :   5 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 brlt  :   0 brmi  :   0 
brne  :  18 brpl  :   0 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   2 bset  :   0 bst   :   0 call  :   0 cbi   :   9 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  37 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  23 cpc   :   4 
cpi   :  51 cpse  :   0 dec   :   1 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :  16 jmp   :  30 ld    :  12 ldd   :   0 ldi   : 248 
lds   :   5 lpm   :   0 lsl   :   3 lsr   :   0 mov   :  62 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  21 or    :   0 
ori   :  17 out   :  25 pop   :  12 push  :  12 rcall : 327 ret   :  34 
reti  :   3 rjmp  :  15 rol   :   1 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   3 sen   :   0 ser   :   3 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  13 std   :   0 sts   :  12 sub   :   3 subi  :   8 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 45 out of 116 (38.8%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009aa   2394      0   2394  262144   0.9%
[.dseg] 0x000200 0x00027b      0    123    123    8192   1.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
